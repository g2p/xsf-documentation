<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle XML Streams</title>
  <abstract>This specification defines a Jingle application type for establishing direct or mediated XML streams between two entities over any reliable transport. This technology thus enables two entities to establish a trusted connection for end-to-end encryption or for bypassing server limits on large volumes of XMPP traffic.</abstract>
  &LEGALNOTICE;
  <number>0247</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0047</spec>
    <spec>XEP-0065</spec>
    <spec>XEP-0166</spec>
    <spec>XEP-0246</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &stpeter;
  &infiniti;
  &dmeyer;
  <revision>
    <version>0.2</version>
    <date>2009-02-20</date>
    <initials>dm</initials>
    <remark><p>Adjust to Jingle-XTLS, Jingle-S5B, and Jingle-IBB. The basic stream setup from XEP-0246 is now included in the document</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2008-06-18</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2008-06-13</date>
    <initials>psa/jk/dm</initials>
    <remark>First draft.</remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>The standard client-server architecture for XMPP communication provides a stable infrastructure for real-time communication. However, there are certain situations in which it is desirable to bypass the standard client-server architecture, including:</p>
  <ul>
    <li>Two endpoints cannot access an XMPP server</li>
    <li>Two endpoints want to enforce end-to-end encryption</li>
    <li>Two endpoints want to send a high volume of XMPP traffic but the intermediate servers enforce rate limits</li>
  </ul>
  <p>The first situation is addressed by &xep0174;. However, if the endpoints already have client-to-server connections but wish to bypass those connections or leverage those streams for a higher-level application such as end-to-end encryption, it is desirable for the two endpoints to negotiate an end-to-end XML stream. This specification defines methods for doing so, where the application format is an XML stream and the transport method is any direct or mediated reliable transport, such as &xep0261; (mediated), &xep0260; (direct or mediated), or a future ice-tcp Jingle transport (direct or mediated) based on &ice-tcp;.</p>
</section1>

<section1 topic='Open a Secure Stream' anchor='protocol'>
  <p>This section provides a friendly introduction to Jingle XML streams.</p>
  <p>First, the party that wishes to initiate the stream determines the responder's capabilities (via &xep0030; or &xep0115;). Here we assume that the responder supports a service discovery feature of 'urn:xmpp:tmp:jingle:apps:xmlstream:0' &NSNOTE; corresponding to the Jingle XML stream functionalited defined herein, as well as the 'urn:xmpp:jingle:transports:s5b:0' and 'urn:xmpp:jingle:transports:ibb:0' features.</p>
  <p>The initiator then sends a Jingle session-initiation request to the responder. The content-type of the request specifies three things:</p>
  <ol start='1'>
    <li><p>An application type of "urn:xmpp:tmp:jingle:apps:xmlstream:0" &NSNOTE;, where the &lt;description/&gt; element specifies parameters for the XML stream and the parameters map to those provided in &xep0155; in a way that is consistent with &xep0116;.</p></li>
    <li><p>Options for the reliable transport method, such as In-Band Bytestreams ("IBB") as defined in <cite>XEP-0261</cite> or SOCKS5 Bytestreams ("S5B") as defined in <cite>XEP-0260</cite>.</p></li>
    <li><p>A security element as defined by <cite>Jingle-XTLS</cite>.</p></li>
  </ol>
  <p>In this example, the initiator is &lt;romeo@montague.lit&gt;, the responder is &lt;juliet@capulet.lit&gt;, and the initiation request specifies Alice's desired stream parameters along with a transport method of "s5b" (i.e., <cite>XEP-0260</cite>).</p>
  <p>The flow is as follows.</p>
  <code><![CDATA[
 Romeo                         Juliet
   |                             |
   |   session-initiate          |
   |---------------------------->|
   |   ack                       |
   |<----------------------------|
   |   session-accept            |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |   [ SOCKS5 negotiation ]    |
   |<--------------------------->|
   |   [ TLS handshake  ]        |
   |<--------------------------->|
   |   [ XML stream ]            |
   |<--------------------------->|
   |   terminate                 |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |                             |
  ]]></code>
  <p>First the initiator sends a Jingle session-initiate.</p>
  <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='jingle1'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='xmlstream'>
      <description xmlns='urn:xmpp:tmp:jingle:apps:xmlstream:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y' 
        	 mode='tcp'>
        <streamhost 
            jid='romeo@montague.lit/orchard' 
            host='192.168.4.1' 
            port='5086'/>
        <streamhost 
            jid='streamer.shakespeare.lit' 
            host='24.24.24.1' 
            zeroconf='_jabber.bytestreams'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder immediately acknowledges receipt of the Jingle session-initiate.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='jingle1'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>If the user accepts the session the responder sends a session-accept.</p>
  <example caption="Responder sends session-accept with streamhost candidates"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hwd987h'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <description xmlns='urn:xmpp:jingle:apps:stub:0'/>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='192.169.1.10'
            port='6539'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='134.102.201.180'
            port='16453'/>
        <streamhost
            jid='juliet@capulet.lit/balcony'
            host='2001:638:708:30c9:219:d1ff:fea4:a17d'
            port='6539'/>
      </transport>
      <security xmlns='urn:xmpp:jingle:security:xtls:0'/>
        <offer xmlns='urn:xmpp:tmp:c2ctls'>
          <keyinfo xmlns='urn:xmpp:tmp:pubkey'>
            <name>JulietX509CertificateHash</name>
          </keyinfo>
          <srp/>
        </offer>
      </security>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges receipt and tries to connect to the offered StreamHosts.</p>
  <example caption="Initiator acknowledges session-accept"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hwd987h'
    to='juliet@capulet.lit/balcony'
    type='result'/>
  ]]></example>
  <p>The clients MUST attempt to open a standard TCP socket on the network address of the StreamHost communicated by the peer. If more than one StreamHost was provided, the client SHOULD try to connect to them in the order they occur.</p>
  <p>If the client is able to open a TCP socket on a StreamHost, it MUST utilize the SOCKS5 protocol specified in &rfc1928; to establish the connection with the StreamHost.</p>
  <example caption='Responder Connects to StreamHost'><![CDATA[
CMD = X'01'
ATYP = X'03'
DST.ADDR = SHA1 Hash of: (SID + Initiator JID + Responder JID)
DST.PORT = 0
  ]]></example>
  <example caption='StreamHost Acknowledges Connection'><![CDATA[
STATUS = X'00'
  ]]></example>
  <p>After one client has authenticated with the StreamHost, it MUST send a Jingle transport-info to the initiator indicating which StreamHost was used.</p>
  <example caption="Initiator sends streamhost-used in Jingle transport-info"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hjdi8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='transport-info'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='stub'>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y'
        	 mode='tcp'>
        <streamhost-used
            jid='juliet@capulet.lit/balcony'
            host='134.102.201.180'
            port='16453'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The peer immediately acknowledges receipt.</p>
  <example caption="Responder acknowledges streamhost-used message"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hjdi8'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>Parallel to the SOCKS5 transport setup the initiator signals the TLS method to be used to the responder.</p>
  <example caption="Initiator sends security-info"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hf749j'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'>
          action='security-info'
          initiator='romeo@montague.lit/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='xmlstream'>
      <security xmlns='urn:xmpp:jingle:security:xtls:0'
                method='x509'/>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder acknowledges the receipt</p>
    <example caption='Responder acknowledges security-info'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hf749j'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
  <p>After the transport stream is ready and the initiator received the acknowledment from the security-info it starts the four-way TLS handshake on the transport stream.</p>
</section1>

<section1 topic='Initiating an e2e Stream' anchor='initiate'>
  <p>If the TLS handshake is complete both clients send an initial &lt;stream/&gt; element to open a client-to-client stream</p>
  <example caption="Opening a Stream"><![CDATA[
<stream:stream 
        xmlns='jabber:client' 
        xmlns:stream='http://etherx.jabber.org/streams'
        from='romeo@montague.lit/orchard'
        to='juliet@capulet.lit/balcony'
        version='1.0'>
  ]]></example>
  <p>In accordance with &rfc3921bis;, the initial stream header SHOULD include the 'to' and 'from' attributes. This should be the full JID of the clients. If the initiator supports stream features and the other stream-related aspects of XMPP 1.0 as specified in <cite>RFC 3920</cite>, then it SHOULD include the version='1.0' flag as shown in the previous example.</p>
</section1>

<section1 topic='Exchanging Stanzas' anchor='exchange'>
  <p>Once the streams are established, either entity then can send XMPP message, presence, and IQ stanzas, with or without 'to' and 'from' addresses.</p>
  <example caption="Sending a Message"><![CDATA[
<message from='romeo@montague.lit/orchard' to='juliet@capulet.lit/balcony'>
  <body>M'lady, I would be pleased to make your acquaintance.</body>
</message>
  ]]></example>
  <example caption="A Reply"><![CDATA[
<message from='juliet@capulet.lit/balcony' to='romeo@montague.lit/orchard'>
  <body>Art thou not Romeo, and a Montague?</body>
</message>
  ]]></example>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Mandatory to Implement Technologies' anchor='impl-mti'>
    <p>All implementations MUST support the In-Band Bytestreams transport method as a reliable method of last resort. An implementation SHOULD support other transport methods as well.</p>
  </section2>
  <section2 topic='Preference Order of Transport Methods' anchor='impl-pref'>
    <p>An application MAY present transport methods in any order, except that the In-Band Bytestreams method MUST be the lowest preference.</p>
  </section2>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>No interaction with &IANA; is required as a result of this document.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>Until this specification advances to a status of Draft, its associated namespaces shall be 'urn:xmpp:tmp:jingle:apps:xmlstream:0'. Upon advancement of this specification, the &REGISTRAR; shall issue a permanent namespace in accordance with the process defined in Section 4 of &xep0053;. The namespace 'urn:xmpp:jingle:apps:xmlstream' is requested and is thought to be unique per the XMPP Registrar's requirements.</p>
  </section2>
  <section2 topic='Jingle Application Formats' anchor='registrar-content'>
    <p>The XMPP Registrar shall include "xmlstream" in its registry of Jingle application formats. The registry submission is as follows:</p>
    <code><![CDATA[
<application>
  <name>xmlstream</name>
  <desc>Jingle sessions for an end-to-end XML stream</desc>
  <transport>reliable</transport>
  <doc>XEP-xxxx</doc>
</application>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:tmp:jingle:apps:xmlstream:0'
    xmlns='urn:xmpp:tmp:jingle:apps:xmlstream:0'
    elementFormDefault='qualified'>

  <xs:element name='description'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'/>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
    ]]></code>
</section1>

</xep>
