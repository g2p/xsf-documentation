<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle XML Streams</title>
  <abstract>This specification defines a Jingle application type for establishing direct or mediated XML streams between two entities over any reliable transport. This technology thus enables two entities to establish a trusted connection for end-to-end encryption or for bypassing server limits on large volumes of XMPP traffic.</abstract>
  &LEGALNOTICE;
  <number>0247</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0047</spec>
    <spec>XEP-0065</spec>
    <spec>XEP-0166</spec>
    <spec>XEP-0246</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &stpeter;
  &infiniti;
  <author>
    <firstname>Dirk</firstname>
    <surname>Meyer</surname>
    <email>dmeyer@tzi.de</email>
    <jid>dmeyer@jabber.org</jid>
  </author>
  <revision>
    <version>0.1</version>
    <date>2008-06-18</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2008-06-13</date>
    <initials>psa/jk/dm</initials>
    <remark>First draft.</remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>The standard client-server architecture for XMPP communication provides a stable infrastructure for real-time communication. However, there are certain situations in which it is desirable to bypass the standard client-server architecture, including:</p>
  <ul>
    <li>Two endpoints cannot access an XMPP server</li>
    <li>Two endpoints want to enforce end-to-end encryption</li>
    <li>Two endpoints want to send a high volume of XMPP traffic but the intermediate servers enforce rate limits</li>
  </ul>
  <p>The first situation is addressed by &xep0174;. However, if the endpoints already have client-to-server connections but wish to bypass those connections or leverage those streams for a higher-level application such as end-to-end encryption, it is desirable for the two endpoints to negotiate an end-to-end XML stream. This specification defines methods for doing so, where the application format is an XML stream and the transport method is any direct or mediated reliable transport, such as &xep0047; (mediated), &xep0065; (direct or mediated), or a future ice-tcp Jingle transport (direct or mediated) based on &ice-tcp;.</p>
</section1>

<section1 topic='How It Works' anchor='protocol'>
  <p>This section provides a friendly introduction to Jingle XML streams.</p>
  <p>First, the party that wishes to initiate the stream determines the responder's capabilities (via &xep0030; or &xep0115;). Here we assume that the responder supports a service discovery feature of 'urn:xmpp:tmp:jingle:apps:xmlstream' &NSNOTE; corresponding to the Jingle XML stream functionalited defined herein, as well as the 'urn:xmpp:tmp:jingle:transports:bytestreams' and 'urn:xmpp:tmp:jingle:transports:ibb' features currently defined in &xep0234;.</p>
  <p>The initiator then sends a Jingle session-initiation request to the responder. The content-type of the request specifies two things:</p>
  <ol start='1'>
    <li><p>An application type of "urn:xmpp:tmp:jingle:apps:xmlstream" &NSNOTE;, where the &lt;description/&gt; element specifies parameters for the XML stream, where the parameters map to those provided in &xep0155; in a way that is consistent with &xep0116;.</p></li>
    <li><p>Options for the reliable transport method, such as In-Band Bytestreams ("IBB") as defined in <cite>XEP-0047</cite> or SOCKS5 Bytestreams ("S5B") as defined in <cite>XEP-0065</cite>.</p></li>
  </ol>
  <p>In this example, the initiator is &lt;alice@example.org&gt;, the responder is &lt;bob@example.com&gt;, and the initiation request specifies Alice's desired stream parameters along with a transport method of "bytestreams" (i.e., <cite>XEP-0065</cite>).</p>
  <p>The flow is as follows.</p>
  <code><![CDATA[
 Alice                          Bob
   |                             |
   |   session-initiate          |
   |---------------------------->|
   |   ack                       |
   |<----------------------------|
   |   [ SOCKS5 negotiation ]    |
   |<--------------------------->|
   |   session-accept            |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |   [ XML stream ]            |
   |---------------------------->|
   |   terminate                 |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |                             |
  ]]></code>
  <p>First the initiator sends a Jingle session-initiate.</p>
  <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='alice@example.org/foo'
    id='jingle1'
    to='bob@example.com/bar'
    type='set'>
  <jingle xmlns='urn:xmpp:tmp:jingle'
          action='session-initiate'
          initiator='alice@example.org/foo'
          sid='851ba2'>
    <content creator='initiator' name='xmlstream'>
      <description 
          xmlns='urn:xmpp:tmp:jingle:apps:xmlstream'
          authentication='optional'
          disclosure='never'
          logging='mustnot'
          tls='required'/>
      <transport xmlns='urn:xmpp:tmp:jingle:transports:bytestreams'/>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder immediately acknowledges receipt of the Jingle session-initiate.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='bob@example.com/bar'
    id='jingle1'
    to='alice@example.org/foo'
    type='result'/>
  ]]></example>
  <p>The initiator then attempts to initiate a SOCKS5 Bytestream with the responder.</p>
  <example caption='Initiation of Interaction'><![CDATA[
<iq type='set' 
    from='alice@example.org/foo' 
    to='bob@example.com/bar' 
    id='initiate'>
  <query xmlns='http://jabber.org/protocol/bytestreams' 
         sid='mySID' 
	 mode='tcp'>
    <streamhost 
        jid='alice@example.org/foo' 
        host='192.168.4.1' 
        port='5086'/>
    <streamhost 
        jid='streamhostproxy.example.net' 
        host='24.24.24.1' 
        zeroconf='_jabber.bytestreams'/>
  </query>
</iq>
  ]]></example>
  <p>If the responder is willing to accept the bytestream, it MUST attempt to open a standard TCP socket on the network address of the StreamHost communicated by the initiator. If the initiator provides more than one StreamHost, the responder SHOULD try to connect to them in the order they occur.</p>
  <p>If the responder is able to open a TCP socket on a StreamHost, it MUST utilize the SOCKS5 protocol specified in &rfc1928; to establish the connection with the StreamHost.</p>
  <example caption='Responder Connects to StreamHost'><![CDATA[
CMD = X'01'
ATYP = X'03'
DST.ADDR = SHA1 Hash of: (SID + Initiator JID + Responder JID)
DST.PORT = 0
  ]]></example>
  <example caption='StreamHost Acknowledges Connection'><![CDATA[
STATUS = X'00'
  ]]></example>
  <p>After the responder has authenticated with the StreamHost, it MUST send an IQ-result to the initiator indicating which StreamHost was used.</p>
  <example caption='Responder Notifies Initiator of Connection'><![CDATA[
<iq type='result' 
    from='bob@example.com/bar' 
    to='alice@example.org/foo' 
    id='initiate'>
  <query xmlns='http://jabber.org/protocol/bytestreams'>
    <streamhost-used jid='streamhostproxy.example.net'/>
  </query>
</iq>
  ]]></example>
  <p>The responder then sends a Jingle session-accept.</p>
  <example caption="Responder sends session-accept"><![CDATA[
<iq from='bob@example.com/bar'
    id='accept1'
    to='alice@example.org/foo'
    type='set'>
  <jingle xmlns='urn:xmpp:tmp:jingle'
          action='session-accept'
          initiator='alice@example.org/foo'
          sid='851ba2'>
    <content creator='initiator' name='xmlstream'>
      <description 
          xmlns='urn:xmpp:tmp:jingle:apps:xmlstream'
          authentication='optional'
          disclosure='never'
          logging='mustnot'
          tls='required'/>
      <transport xmlns='urn:xmpp:tmp:jingle:transports:bytestreams'/>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges the Jingle session-accept.</p>
  <example caption="Initiator acknowledges session-accept"><![CDATA[
<iq from='bob@example.com/bar'
    id='accept1'
    to='alice@example.org/foo'
    type='result'/>
  ]]></example>
  <p>Now the parties start an XML stream over the negotiated bytestream, following the recommendations in &xep0246;.</p>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Mandatory to Implement Technologies' anchor='impl-mti'>
    <p>All implementations MUST support the In-Band Bytestreams transport method as a reliable method of last resort. An implementation SHOULD support other transport methods as well.</p>
  </section2>
  <section2 topic='Preference Order of Transport Methods' anchor='impl-pref'>
    <p>An application MAY present transport methods in any order, except that the In-Band Bytestreams method MUST be the lowest preference.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>In order to secure the e2e XML stream, implementations SHOULD use the standard STARTTLS method defined in <cite>XMPP Core</cite> but MAY instead use a TLS encrypted port that provides immediate encryption rather than upgrading of the stream via STARTTLS.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>No interaction with &IANA; is required as a result of this document.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>Until this specification advances to a status of Draft, its associated namespaces shall be 'urn:xmpp:tmp:jingle:apps:xmlstream'. Upon advancement of this specification, the &REGISTRAR; shall issue a permanent namespace in accordance with the process defined in Section 4 of &xep0053;. The namespace 'urn:xmpp:jingle:apps:xmlstream' is requested and is thought to be unique per the XMPP Registrar's requirements.</p>
  </section2>
  <section2 topic='Jingle Application Formats' anchor='registrar-content'>
    <p>The XMPP Registrar shall include "xmlstream" in its registry of Jingle application formats. The registry submission is as follows:</p>
    <code><![CDATA[
<application>
  <name>xmlstream</name>
  <desc>Jingle sessions for an end-to-end XML stream</desc>
  <transport>reliable</transport>
  <doc>XEP-xxxx</doc>
</application>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:tmp:jingle:apps:xmlstream'
    xmlns='urn:xmpp:tmp:jingle:apps:xmlstream'
    elementFormDefault='qualified'>

  <xs:element name='description'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='authentication' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='optional'/>
                <xs:enumeration value='required'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='disclosure' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='disabled'/>
                <xs:enumeration value='enabled'/>
                <xs:enumeration value='never'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='logging' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='may'/>
                <xs:enumeration value='mustnot'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='tls' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='optional'/>
                <xs:enumeration value='required'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
    ]]></code>
</section1>

</xep>
