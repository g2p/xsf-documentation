<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle Session Transfer</title>
  <abstract>This specification defines an extension to XMPP Jingle for transferring a session (such as a voice call) from one person to another.</abstract>
  &LEGALNOTICE;
  <number>0251</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0166</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &diana;
  <author>
    <firstname>Paul</firstname>
    <surname>Chitescu</surname>
    <email>paulc@null.ro</email>
  </author>
  &stpeter;
  <revision>
    <version>0.1</version>
    <date>2008-10-22</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2008-10-22</date>
    <initials>psa</initials>
    <remark><p>Added XML schema.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2008-10-21</date>
    <initials>dc/pc/psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>The &xep0166; extensions to XMPP provide a technology for setup, management, and teardown of multimedia sessions between two entities, with an initial focus on voice over Internet Protocol (VoIP). By design, Jingle has been kept relatively simple and it does not cover the kind of advanced features that are available on the public switched telephone network (PSTN) and traditional private branch exchange (PBX) systems. However, because Jingle and XMPP itself provide an extensible technology for the real-time exchange of XML data, more advanced use cases can be defined through additional extensions. This document specifies one such extension, for the transfer of a session from one entity to another entity; although this extension will likely be used mainly in the context of VoIP interactions, it could also be used for any Jingle application type, such as video chat or screen sharing.</p>
</section1>

<section1 topic='Unattended Transfer' anchor='unattended'>
  <p>The session flow for negotiating an unattended transfer is as follows:</p>
  <code><![CDATA[
Caller                 Attendant                 Callee
  |                        |                        |
  |   session-initiate     |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |   session-accept       |                        |
  |<-----------------------|                        |
  |   ack                  |                        |
  |----------------------->|                        |
  |   transfer             |                        |
  |<-----------------------|                        |
  |   ack                  |                        |
  |----------------------->|                        |
  |   hold                 |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |                 session-initiate                |
  |------------------------------------------------>|
  |                       ack                       |
  |<------------------------------------------------|
  |   terminate            |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |                 session-accept                  |
  |<------------------------------------------------|
  |                       ack                       |
  |------------------------------------------------>|
  |                    AUDIO (RTP)                  |
  |<===============================================>|
  |                                                 |
  ]]></code>
  <p>The protocol flow is shown below, where the caller is "caller@world.sun", the attendant is "attendant@office.biz", and the callee is "boss@bigdesk.biz".</p>
  <p>First the caller initiates a normal call to the attendant.</p>
  <example caption='Caller calls attendant'><![CDATA[
<iq from='caller@world.sun/phone'
    id='jingle1'
    to='attendant@office.biz/desk'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-initiate'
         initiator='caller@world.sun/phone'
         sid='851ba2'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'/>
   </content>
 </jingle>
</iq>
  ]]></example>
  <p>The attendant's phone then acknowledges the session request.</p>
  <example caption='Attendant acks session-initiate'><![CDATA[
<iq from='attendant@office.biz/desk'
    to='caller@world.sun/phone'
    id='jingle1'
    type='result'/>
  ]]></example>
  <p>Next the attendant answers the call.</p>
  <example caption='Attendant sends session-accept'><![CDATA[
<iq from='attendant@office.biz/desk'
    to='caller@world.sun/phone'
    id='accept1'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-accept'
         initiator='caller@world.sun/phone'
         responder='attendant@office.biz/desk'
         sid='851ba2'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'>
       <candidate .../>
     </transport>
 </jingle>
</iq>
  ]]></example>
  <p>The caller acknowledges the session-accept.</p>
  <example caption='Caller acks session-accept'><![CDATA[
<iq from='caller@world.sun/phone'
    id='accept1'
    to='attendant@office.biz/desk'
    type='result'/>
  ]]></example>
  <p>Now the attendant decides to transfer the call. It does this by sending a Jingle action of type session-info to the caller, specifying the address of the callee via an &lt;transfer/&gt; element qualified by the "urn:xmpp:jingle:transfer:0" namespace &VNOTE;.</p>
  <example caption='Attendant transfers the call'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='transfer1'
    to='caller@world.sun/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-info'
         initiator='caller@world.sun/phone'
         responder='attendant@office.biz/desk'
         sid='851ba2'>
   <transfer xmlns='urn:xmpp:jingle:transfer:0'
           to='boss@bigdesk.biz/phone'/>
 </jingle>
</iq>
  ]]></example>
  <p>If the caller understands the transfer request, it acknowledges the request (if not, it MUST return a &feature; error as specified in <cite>XEP-0166</cite>).</p>
  <example caption='Caller acks transfer request'><![CDATA[
<iq from='attendant@office.biz/desk'
    to='caller@world.sun/phone'
    id='transfer1'
    type='result'/>
  ]]></example>
  <p>Now the caller puts the attendant on hold.</p>
  <example caption='Caller puts attendant on hold'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='hold1'
    to='caller@world.sun/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-info'
         initiator='caller@world.sun/phone'
         sid='851ba2'>
   <hold xmlns='urn:xmpp:jingle:apps:rtp:info:0'/>
 </jingle>
</iq>
  ]]></example>
  <p>While the attendant is on hold, the caller initiates a new call to the callee. The session-initiation request includes an &lt;transfer/&gt; element that specifies the attendant's address.</p>
  <example caption='Caller initiates new call to callee'><![CDATA[
<iq from='caller@world.sun/phone'
    id='jingle3'
    to='boss@bigdesk.biz/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-initiate'
         initiator='caller@world.sun/phone'
         sid='1a332d'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'/>
   </content>
   <transfer xmlns='urn:xmpp:jingle:transfer:0'
           from='attendant@office.biz/desk'/>
 </jingle>
</iq>
  ]]></example>
  <p>The callee acknowledges the call.</p>
  <example caption='Callee acks session-initiate'><![CDATA[
<iq from='boss@bigdesk.biz/phone'
    to='caller@world.sun/phone'
    id='jingle3'
    type='result'/>
  ]]></example>
  <p>Now the caller's phone detects the successful transfer, so it hangs up on the attendant:</p>
  <example caption='Caller terminates session with attendant'><![CDATA[
<iq from='caller@world.sun/phone'
    id='hangup1'
    to='attendant@office.biz/desk'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-terminate'
         initiator='attendant@office.biz/desk'
         sid='851ba2'>
   <reason>
     <success/>
     <transferred xmlns='urn:xmpp:jingle:transfer:0'/>
     <text>Unattended transfer success</text>
   </reason>
 </jingle>
</iq>
  ]]></example>
</section1>

<section1 topic='Attended Transfer' anchor='attended'>
  <p>The session flow for negotiating an unattended transfer is as follows:</p>
  <code><![CDATA[
Caller                 Attendant                 Callee
  |                        |                        |
  |   session-initiate     |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |   session-accept       |                        |
  |<-----------------------|                        |
  |   ack                  |                        |
  |----------------------->|                        |
  |                        |   session-initiate     |
  |                        |----------------------->|
  |                        |   ack                  |
  |                        |<-----------------------|
  |   transfer             |                        |
  |<-----------------------|                        |
  |   ack                  |                        |
  |----------------------->|                        |
  |   hold                 |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |                 session-initiate                |
  |------------------------------------------------>|
  |                       ack                       |
  |<------------------------------------------------|
  |   terminate            |                        |
  |----------------------->|                        |
  |   ack                  |                        |
  |<-----------------------|                        |
  |                 session-accept                  |
  |<------------------------------------------------|
  |                       ack                       |
  |------------------------------------------------>|
  |                    AUDIO (RTP)                  |
  |<===============================================>|
  |                                                 |
  ]]></code>
  <p>The protocol flow is shown below, where the caller is "caller@world.sun", the attendant is "attendant@office.biz", and the callee is "boss@bigdesk.biz".</p>
  <p>First the caller initiates a normal call to the attendant.</p>
  <example caption='Caller calls attendant'><![CDATA[
<iq from='caller@world.sun/phone'
    id='jingle1'
    to='attendant@office.biz/desk'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-initiate'
         initiator='caller@world.sun/phone'
         sid='851ba2'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'/>
   </content>
 </jingle>
</iq>
  ]]></example>
  <p>The attendant's phone then acknowledges the session request.</p>
  <example caption='Attendant acks session-initiate'><![CDATA[
<iq from='attendant@office.biz/desk'
    to='caller@world.sun/phone'
    id='jingle1'
    type='result'/>
  ]]></example>
  <p>Next the attendant answers the call.</p>
  <example caption='Attendant sends session-accept'><![CDATA[
<iq from='attendant@office.biz/desk'
    to='caller@world.sun/phone'
    id='accept1'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-accept'
         initiator='caller@world.sun/phone'
         responder='attendant@office.biz/desk'
         sid='851ba2'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'>
       <candidate .../>
     </transport>
 </jingle>
</iq>
  ]]></example>
  <p>The caller acknowledges the session-accept.</p>
  <example caption='Caller acks session-accept'><![CDATA[
<iq from='caller@world.sun/phone'
    id='accept1'
    to='attendant@office.biz/desk'
    type='result'/>
  ]]></example>
  <p>Next the attendant makes a call to the callee for the purpose of making an attended transfer:</p>
  <example caption='Attendant calls callee'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='jingle2'
    to='boss@bigdesk.biz/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-initiate'
         initiator='attendant@office.biz/desk'
         sid='663e9f'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'/>
   </content>
 </jingle>
</iq>
  ]]></example>
  <p>The callee acknowledges the session-initiate.</p>
  <example caption='Callee acks session-initiate'><![CDATA[
<iq from='boss@bigdesk.biz/phone'
    id='jingle2'
    to='attendant@office.biz/desk'
    type='result'/>
  ]]></example>
  <p>Now the attendant decides to transfer the call by sending a session-info action to the caller containing details about the attendant's session with the callee.</p>
  <example caption='Attendant transfers the call'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='transfer1'
    to='caller@world.sun/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-info'
         initiator='caller@world.sun/phone'
         responder='attendant@office.biz/desk'
         sid='851ba2'>
   <transfer xmlns='urn:xmpp:jingle:transfer:0'
           from='attendant@office.biz/desk'
           sid='663e9f'
           to='boss@bigdesk.biz/phone'/>
 </jingle>
</iq>
  ]]></example>
  <p>If the caller understands the transfer request, it acknowledges the request (if not, it MUST return a &feature; error as specified in <cite>XEP-0166</cite>).</p>
  <example caption='Caller acks transfer request'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='transfer1'
    to='caller@world.sun/phone'
    type='result'/>
  ]]></example>
  <p>Now the caller puts the attendant on hold.</p>
  <example caption='Caller puts attendant on hold'><![CDATA[
<iq from='attendant@office.biz/desk'
    id='hold1'
    to='caller@world.sun/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-info'
         initiator='caller@world.sun/phone'
         sid='851ba2'>
   <hold xmlns='urn:xmpp:jingle:apps:rtp:info:0'/>
 </jingle>
</iq>
  ]]></example>
  <p>While the attendant is on hold, the caller initiates a new call to the callee. The session-initiation request includes an &lt;transfer/&gt; element that specifies the attendant's address and the SessionID of the attendant's session with the callee.</p>
  <example caption='Caller initiates new call to callee'><![CDATA[
<iq from='caller@world.sun/phone'
    id='jingle3'
    to='boss@bigdesk.biz/phone'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-initiate'
         initiator='caller@world.sun/phone'
         sid='851ba2'>
   <content creator='initiator'
            disposition='session'
            name='voice'>
     <description xmlns='urn:xmpp:jingle:apps:rtp:0'
                  media='audio'>
       <payload-type id='0' name='PCMU' />
     </description>
     <transport xmlns='urn:xmpp:jingle:transports:ice-udp:0'/>
   </content>
   <transfer xmlns='urn:xmpp:jingle:transfer:0'
           from='attendant@office.biz/desk'
           sid='663e9f'
           to='boss@bigdesk.biz/phone'/>
 </jingle>
</iq>
  ]]></example>
  <p>The callee identifies an active session with the same from+to+sid and replaces that with the incoming call, so it hangs up on the existing session with the attendant.</p>
  <example caption='Callee hangs up on attendant'><![CDATA[
<iq from='boss@bigdesk.biz/phone'
    id='hangup2'
    to='attendant@office.biz/desk'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-terminate'
         initiator='attendant@office.biz/desk'
         sid='663e9f'>
   <reason>
     <success/>
     <transferred xmlns='urn:xmpp:jingle:transfer:0'/>
     <text>Attended transfer success</text>
   </reason>
 </jingle>
</iq>
  ]]></example>
  <p>The callee then acknowledges the session request from the caller.</p>
  <example caption='Callee acks session-initiate'><![CDATA[
<iq from='boss@bigdesk.biz/phone'
    to='caller@world.sun/phone'
    id='jingle3'
    type='result'/>
  ]]></example>
  <p>Now the caller's phone detects the successful transfer, so it hangs up on the attendant:</p>
  <example caption='Caller terminates session with attendant'><![CDATA[
<iq from='caller@world.sun/phone'
    id='hangup2'
    to='attendant@office.biz/desk'
    type='set'>
 <jingle xmlns='urn:xmpp:jingle:0'
         action='session-terminate'
         initiator='attendant@office.biz/desk'
         sid='851ba2'>
   <reason>
     <success/>
     <transferred xmlns='urn:xmpp:jingle:transfer:0'/>
     <text>Unattended transfer success</text>
   </reason>
 </jingle>
</iq>
  ]]></example>
</section1>

<section1 topic='Determining Support' anchor='support'>
  <p>If an entity supports session transfers, it MUST advertise that fact by returning a feature of "urn:xmpp:jingle:transfer:0" &VNOTE; in response to &xep0030; information requests.</p>
  <example caption="Service discovery information request"><![CDATA[
<iq from='caller@world.sun/phone
    id='disco1'
    to='attendant@office.biz/desk'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service discovery information response"><![CDATA[
<iq from='attendant@office.biz/desk'
    id='disco1'
    to='caller@world.sun/phone
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:jingle:0'/>
    <feature var='urn:xmpp:jingle:transfer:0'/>
  </query>
</iq>
  ]]></example>
  <p>In order for an application to determine whether an entity supports this protocol, where possible it SHOULD use the dynamic, presence-based profile of service discovery defined in &xep0115;. However, if an application has not received entity capabilities information from an entity, it SHOULD use explicit service discovery instead.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>To follow.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p> 
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespace:</p>
    <ul>
      <li>urn:xmpp:jingle:transfer:0</li>
    </ul>
    <p>Upon advancement of this specification from a status of Experimental to a status of Draft, the &REGISTRAR; shall add the foregoing namespaces to the registry located at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Protocol Versioning' anchor='registrar-versioning'>
    &NSVER;
  </section2>
</section1>

<section1 topic='XML Schemas' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:transfer:0'
    xmlns='urn:xmpp:jingle:transfer:0'
    elementFormDefault='qualified'>

  <xs:element name='transfer'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='from' type='xs:string' use='optional'/>
          <xs:attribute name='sid' type='xs:string' use='optional'/>
          <xs:attribute name='to' type='xs:string' use='optional'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name='transferred' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>

<section1 topic='Acknowledgements' anchor='ack'>
  <p>Thanks to Robert McQueen for his feedback.</p>
</section1>

</xep>
