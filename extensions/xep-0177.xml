<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE jep SYSTEM '../jep.dtd' [
  <!ENTITY % ents SYSTEM '../jep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='../jep.xsl'?>
<jep>
<header>
  <title>Jingle Raw UDP Transport</title>
  <abstract>This document defines a Jingle transport method that results in sending data over a raw User Datagram Protocol (UDP) connection.</abstract>
  &LEGALNOTICE;
  <number>0177</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <jig>Standards JIG</jig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>JEP-0166</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>raw-udp</shortname>
  &joebeda;
  &stpeter;
  &scottlu;
  &hildjj;
  &seanegan;
  <revision>
    <version>0.2</version>
    <date>2006-07-12</date>
    <initials>se/psa</initials>
    <remark>Removed candidate element and specified exchange of address information via transport-info messages; clarified usage of name attribute.</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-03-01</date>
    <initials>psa/jb</initials>
    <remark>Initial JEP version (split from JEP-0166).</remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>&jep0166; defines a framework for negotiating and managing out-of-band data sessions over XMPP. In order to provide a flexible framework, the base Jingle specification defines neither data transport methods nor content (session) types, leaving that up to separate specifications. The current document defines a transport method for establishing and managing data between XMPP entities using a raw User Datagram Protocol (UDP) connection (see &rfc0768;).</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The Jingle transport method defined herein is designed to meet the following requirements:</p>
  <ol>
    <li>Make it possible to establish and manage out-of-band connections between two XMPP entities over the IP address and port that the initiator considers most likely to succeed.</li>
    <li>Make it relatively easy to implement support in standard Jabber/XMPP clients.</li>
    <li>Where communication with non-XMPP entities is needed, push as much complexity as possible onto server-side gateways between the XMPP network and the non-XMPP network.</li>
  </ol>
</section1>
<section1 topic='Protocol Description' anchor='protocol'>
  <section2 topic='Transport Initiation' anchor='protocol-initiate'>
    <p>In order for the initiating entity in a Jingle exchange to start the negotiation, it MUST send a Jingle "session-initiate" stanza as described in <cite>JEP-0166</cite>. This stanza MUST include at least one transport methods. If the initiating entity wishes to negotiate the Raw UDP transport, it MUST include an empty &TRANSPORT; child element qualified by the 'http://jabber.org/protocol/jingle/transport/raw-udp' namespace.</p>
    <example caption="Initiation Example"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='jingle1' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='session-initiate' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <description ...>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/raw-udp'/>
  </jingle>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Target Entity Response' anchor='protocol-response'>
    <p>As described in <cite>JEP-0166</cite>, to provisionally accept the session initiation request, the target entity returns an IQ-result:</p>
    <example caption="Target Entity Provisionally Accepts the Session Request"><![CDATA[
<iq type='result' from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='jingle1'/>
    ]]></example>
  </section2>
  <section2 topic='Exchanging Address Information' anchor='protocol-addresses'>
    <p>Once the session is provisionally accepted, each entity should send one &TRANSPORT; element in a transport-info meessage, containing exactly one &CANDIDATE; element per channel, whose 'ip' and 'port' attributes specify the IP address and port number of the candidate that the initiator has reason to believe will be most likely to succeed for that channel. (Note: In older versions of JEP-0166, this was referrred to as the "default candidate".) This is not necessarily the initiator's preferred address for communication, but instead is the "address most likely to succeed", i.e., the address that is assumed to be reachable by the vast majority of target entities. To determine reachability, the client needs classify ahead of time the permissiveness of the firewall or network address translator (NAT) it is behind, if any. If the NAT is symmetric (not permissive), the candidate SHOULD specify a relay address. Otherwise it SHOULD be an address derived via prior discovery using &rfc3489;, which will be an address on the outside of the firewall or NAT.</p>
    <example caption="Address Exchange Example"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='jingle2' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='transport-info' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/raw-udp'>
      <candidate name='myvoicedata' ip='10.1.1.104' port='13540' generation='0'/>
    </transport>
  </jingle>
</iq>
    ]]></example>
    <p>Note: The 'name' attribute specifies the name of the channel and the 'generation' attribute provides a tracking mechanism for determining which version of this candidate is in force (this is useful if the candidate is redefined mid-stream, for example if the port is changed).</p>
    <p>Either entity may send this transport-info message at any time, after which the recipient should send and receive data to and from the new address.</p>
  </section2>
 
  <section2 topic='Informational Messages' anchor='protocol-info'>
    <p>The syntax and semantics informational message payloads specific to the Raw UDP transport method will be defined in a future version of this specification.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <section2 topic='End-to-End Data Encryption' anchor='security-e2e'>
    <p>In order to secure the end-to-end data stream, implementations SHOULD use encryption methods appropriate to the transport method in use.</p>
  </section2>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This JEP requires no interaction with &IANA;.</p>
</section1>

<section1 topic='Jabber Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; shall include 'http://jabber.org/protocol/jingle/transport/raw-udp' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Jingle Transport Methods' anchor='registrar-transports'>
    <p>The Jabber Registrar shall include "http://jabber.org/protocol/jingle/transport/raw-udp" in its registry of Jingle transport methods. The registry submission is as follows:</p>
    &REGPROCESS;
    <code><![CDATA[
<transport>
  <name>raw-udp</name>
  <desc>A method for exchanging data over a raw UDP connection.</desc>
  <doc>JEP-0176</doc>
</transport>
    ]]></code>
  </section2>
</section1>
<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/jingle/transport/raw-udp'
    xmlns='http://jabber.org/protocol/jingle/transport/raw-udp'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref='candidate' minOccurs='0' maxOccurs='1'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='candidate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='generation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='name' type='xs:string' use='required'/>
          <xs:attribute name='ip' type='xs:string' use='required'/>
          <xs:attribute name='port' type='xs:unsignedShort' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>
</jep>
