<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
<!ENTITY icecore "<cite>ICE-CORE</cite>">
<!ENTITY icetcp "<cite>ICE-TCP</cite>">
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle ICE Transport</title>
  <abstract>This document defines a Jingle transport method that results in sending data between two entities using the Interactive Connectivity Establishment (ICE) methodology.</abstract>
  &LEGALNOTICE;
  <number>0176</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0166</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>TO BE ASSIGNED</shortname>
  &stpeter;
  &joebeda;
  &scottlu;
  &hildjj;
  &seanegan;
  <revision>
    <version>0.10</version>
    <date>2007-11-15</date>
    <initials>psa</initials>
    <remark><p>Editorial review and consistency check.</p></remark>
  </revision>
  <revision>
    <version>0.9</version>
    <date>2007-06-28</date>
    <initials>psa</initials>
    <remark><p>Updated to track ICE-16.</p></remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2007-04-17</date>
    <initials>psa</initials>
    <remark><p>Separately defined ice-tcp and ice-udp transport methods to enable clearer definition of transport methods and reuse by application types; specified Jingle conformance, including definition of ice-udp as lossy and ice-tcp as reliable.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2007-03-23</date>
    <initials>psa</initials>
    <remark><p>Updated to track ICE-14 and ICE-TCP-03; moved text on discovery of STUN servers to separate specification.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2006-12-21</date>
    <initials>psa</initials>
    <remark><p>Modified spec to use provisional namespace before advancement to Draft (per XEP-0053).</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2006-10-31</date>
    <initials>psa</initials>
    <remark><p>Updated to track ICE-12; corrected service discovery process; completed editorial review; removed mention of DTMF, which is for audio only.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2006-09-13</date>
    <initials>psa</initials>
    <remark><p>Updated to track ICE-10; added section on service discovery.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-07-12</date>
    <initials>se/psa</initials>
    <remark><p>Specified that DTMF must use in-band signalling (XEP-0181).</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-03-24</date>
    <initials>psa</initials>
    <remark><p>Recommended use of RTP-native methods for DTMF.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-03-01</date>
    <initials>psa/jb</initials>
    <remark><p>Initial version (split from XEP-0166).</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p><em>Note: This document depends on the IETF's specifications for &ice; and &ice-tcp; (the former has been approved but the latter is still a work in progress). Every effort has been made to keep this document synchronized with <cite>draft-ietf-mmusic-ice</cite> and <cite>draft-ietf-mmusic-ice-tcp</cite>. The interested reader is referred to &icecore; for a detailed description of the ICE methodology, which for the most part this document merely maps to XMPP syntax.</em></p>
  <p>&xep0166; defines a framework for negotiating and managing out-of-band data sessions over XMPP. In order to provide a flexible framework, the base Jingle specification defines neither data transport methods nor application formats, leaving that up to separate specifications. The current document defines two transport methods (ice-udp and ice-tcp) for establishing and managing data connections between XMPP entities, using the ICE methodology developed within the IETF. The ice-udp method results in a lossy transport suitable for use in media applications where some packet loss is tolerable (e.g., audio and video), whereas the ice-tcp method results in a reliable transport suitable for use in applications where packet loss is not tolerable (e.g., file transfer).</p>
  <p>The process for ICE negotiation is largely the same in Jingle as it is in ICE. There are several differences:</p>
  <ul>
    <li>Instead of using SIP as the signalling channel, Jingle uses XMPP as the signalling channel.</li>
    <li>In Jingle, each candidate transport is sent in a separate IQ exchange (rather than sending all candidates at once as in &icecore;). <note>This approach takes advantage of the request-response semantics of the XMPP &IQ; stanza type and enables the parties to send higher-priority candidates earlier in the negotiation, but implies that Jingle is not exactly an offer-answer protocol as specified in RFC 3264.</note></li>
    <li>Syntax from the Session Description Protocol (see &rfc4566;) is mapped to an XML syntax suitable for sending over the XMPP signalling channel.</li>
  </ul>
</section1>
<section1 topic='Glossary' anchor='terms'>
  <p>The reader is referred to &icecore; and &icetcp; for a description of various terms used in the context of ICE. Those terms are not reproduced here.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The Jingle transport methods defined herein are designed to meet the following requirements:</p>
  <ol>
    <li>Make it possible to establish and manage out-of-band connections between two XMPP entities, even if they are behind Network Address Translators (NATs) or firewalls.</li>
    <li>Enable use of either UDP (see &icecore;) or TCP (see &icetcp;) as the transport protocol itself.</li>
    <li>Make it relatively easy to implement support in standard Jabber/XMPP clients.</li>
    <li>Where communication with non-XMPP entities is needed, push as much complexity as possible onto server-side gateways between the XMPP network and the non-XMPP network.</li>
  </ol>
</section1>
<section1 topic='Jingle Conformance' anchor='conformance'>
   <p>In accordance with Section 8 of <cite>XEP-0166</cite>, this document specifies the following information related to the Jingle ice-udp and ice-tcp transport methods:</p>
   <ol>
     <li><p>The transport negotiation process is defined in the <link url='#protocol'>Protocol Description</link> section of this document.</p></li>
     <li><p>The semantics of the &TRANSPORT; element are defined in the <link url='#protocol-negotiate'>ICE Negotiation</link> section of this document.</p></li>
     <li><p>Successful negotiation of the ice-udp method results in use of a lossy transport that is suitable for applications where some packet loss is tolerable, such as audio and video; successful negotiation of the ice-tcp method results in use of a reliable transport that is suitable for applications where packet loss is not tolerable, such as file transfer.</p></li>
     <li><p>If multiple components are to be communicated over the transport in the context of the Real-time Transport Protocol (RTP; see &rfc3550;), the component numbered "1" shall be associated with RTP and the component numbered "2" shall be associated with the Real Time Control Protocol (RTCP).</p></li>
   </ol>
</section1>
<section1 topic='Protocol Description' anchor='protocol'>
  <section2 topic='Transport Initiation' anchor='protocol-initiate'>
    <p>In order for the initiator in a Jingle exchange to start the negotiation, it MUST send a Jingle "session-initiate" stanza as described in <cite>XEP-0166</cite>. A content type MUST include one transport method. If the initiator wishes to negotiate the ice-udp or ice-tcp transport for an application format, it MUST include an empty &TRANSPORT; child element qualified by the 'http://www.xmpp.org/extensions/xep-0176.html#ns-udp' or 'http://www.xmpp.org/extensions/xep-0176.html#ns-tcp' namespace &NSNOTE;.</p>
    <example caption="Initiation"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='jingle1' 
    to='juliet@capulet.com/balcony' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns' 
          action='session-initiate' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content name='this-is-the-audio-content' profile='RTP/AVP'>
      <description xmlns='http://www.xmpp.org/extensions/xep-0167.html#ns'>
        [ ... ]
      </description>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'/>
    </content>
  </jingle>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Receiver Response' anchor='protocol-response'>
    <p>As described in <cite>XEP-0166</cite>, to provisionally accept the session initiation request, the responder returns an IQ-result:</p>
    <example caption="Receiver provisionally accepts the session request"><![CDATA[
<iq from='juliet@capulet.com/balcony' 
    id='jingle1'
    to='romeo@montague.net/orchard' 
    type='result'/>
    ]]></example>
  </section2>
  <section2 topic='ICE Negotiation' anchor='protocol-negotiate'>
    <p>If the responder provisionally accepts the session initiation request as shown above, both initiator and responder MUST immediately negotiate connectivity over the ICE transport by exchanging XML-formatted candidate transports for the channel. This negotiation proceeds immediately in order to maximize the possibility that media can be exchanged as quickly as possible. <note>Concurrent with negotiation of the ICE candidates, it is possible for the initiator and responder to negotiate which content types the session will include, which transport methods will be tried for each content type, etc. Those negotiation flows are shown in <cite>XEP-0166</cite>. This document specifies only negotiation of the ICE transport method.</note></p>
    <p>Note: In order to expedite session establishment, the initiator MAY send transport candidates immediately after sending the "session-initiate" message and before receiving acknowledgement from the receiver (i.e., the initiator MUST consider the session to be live even before receiving acknowledgement). Given in-order delivery, the receiver should receive such "transport-info" messages after receiving the "session-initiate" message; if not, it is appropriate for the receiver to return &lt;unknown-session/&gt; errors since it according to its state machine the session does not exist. If either party receives an &lt;unknown-session/&gt; from the other party, it MUST terminate the negotiation and the session.</p>
    <p>The candidate syntax and negotiation flow are described below. (This document shows negotiation for the ice-udp transport method, but the same principles apply to the ice-tcp transport method.)</p>
    <section3 topic='Syntax of Candidate Element' anchor='protocol-negotiate-candidate'>
      <p>The following is an example of the candidate format:</p>
      <example caption="Initiator sends a candidate transport"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='info1' 
    to='juliet@capulet.com/balcony' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns' 
          action='transport-info'
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='this-is-the-audio-content' profile='RTP/AVP'>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'>
        <candidate component='1'
                   foundation='1'
                   generation='0' 
                   ip='10.0.1.1' 
                   network='0'
                   port='8998'
                   priority='2114978302'
                   protocol='udp'
                   pwd='asd88fgpdd777uzjYhagZg'
                   type='host'
                   ufrag='8hhy'/>
      </transport>
    </content>
  </jingle>
</iq>
      ]]></example>
      <p>The attributes of the &lt;candidate/&gt; element are described in the following table:</p>
      <table caption='Candidate Attributes'>
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th>SDP Syntax</th>
          <th>Example</th>
        </tr>
        <tr>
          <td>component</td>
          <td>A Component ID as defined in &icecore;.</td>
          <td>Component ID value in a=candidate line</td>
          <td>1</td>
        </tr>
        <tr>
          <td>foundation</td>
          <td>A Foundation as defined in &icecore;.</td>
          <td>Foundation value in a=candidate line</td>
          <td>1</td>
        </tr>
        <tr>
          <td>generation</td>
          <td>An index, starting at 0, that enables the parties to keep track of updates to the candidate throughout the life of the session.</td>
          <td>N/A</td>
          <td>0</td>
        </tr>
        <tr>
          <td>ip</td>
          <td>The Internet Protocol (IP) address for the candidate transport mechanism; this may be either an IPv4 address or an IPv6 address.</td>
          <td>IP Address value in a=candidate line</td>
          <td>10.0.1.1</td>
        </tr>
        <tr>
          <td>network</td>
          <td>An index, starting at 0, referencing which network this candidate is on for a given peer (used for diagnostic purposes if the calling hardware has more than one Network Interface Card).</td>
          <td>N/A</td>
          <td>0</td>
        </tr>
        <tr>
          <td>port</td>
          <td>The port at the candidate IP address.</td>
          <td>Port value in a=candidate line</td>
          <td>8998</td>
        </tr>
        <tr>
          <td>priority</td>
          <td>A Priority as defined in &icecore;
            <note>In accordance with the rules specified in Section 4.1.1 of &icecore;, the priority values shown in the examples within this document have been calculated as follows. The "type preference" for host candidates is stipulated to be "126" and for server reflexive candidates "100". The "local preference" for network 0 is stipulated to be "4096", for network 1 "2048", and for network 2 "1024".</note>
          </td>
          <td>Priority value in a=candidate line</td>
          <td>1678246398</td>
        </tr>
        <tr>
          <td>protocol</td>
          <td>The protocol to be used. The allowable values are: "udp" (when the ice-udp transport method is used); "tcp-act", "tcp-pass", and "tcp-so" (when the ice-tcp transport method is used); in addition, future specifications may specify other allowable values.</td>
          <td>Transport protocol field in a=candidate line</td>
          <td>udp</td>
        </tr>
        <tr>
          <td>pwd</td>
          <td>A Password as defined in &icecore;.</td>
          <td>a=ice-pwd line</td>
          <td>asd88fgpdd777uzjYhagZg</td>
        </tr>
        <tr>
          <td>type</td>
          <td>A Candidate Type as defined in &icecore;. The allowable values are "host" for host candidates, "prflx" for peer reflexive candidates, "relay" for relayed candidates, and "srflx" for server reflexive candidates.</td>
          <td>Typ field in a=candidate line</td>
          <td>srflx</td>
        </tr>
        <tr>
          <td>ufrag</td>
          <td>A User Fragment as defined in &icecore;.</td>
          <td>a=ice-ufrag line</td>
          <td>8hhy</td>
        </tr>
      </table>
    </section3>
    <section3 topic='Negotiation Flow' anchor='protocol-negotiate-flow'>
      <p>The first step in negotiating connectivity is for both parties to immediately begin sending candidate transport methods to the other client. <note>The fact that both parties send candidates means that Jingle requires each party to be a full implementation of ICE, not a "lite" implementation as specified in &icecore;.</note> These candidates SHOULD be gathered by following the procedure specified in Section 4.1.1 of &icecore; and prioritized by following the procedure specified in Section 4.1.2 of &icecore;. Each candidate MUST be sent in a &JINGLE; element with an action of "transport-info".</p>
      <p>If the responder receives and can successfully process a given candidate, it returns an IQ-result (if not, for example because the candidate data is improperly formatted, it returns an error). Note: The responder is only indicating receipt of the candidate, not telling the initiator that the candidate will be used.</p>
      <p>The initiator keeps sending candidates, one after the other (without stopping to receive an acknowledgement of receipt from the responder for each candidate) until it has exhausted its supply of possible or desirable candidate transports. (Because certain candidates may be more "expensive" in terms of bandwidth or processing power, the initiator may not want to advertise their existence unless necessary.) For each candidate, the responder acknowledges receipt.</p>
      <p>At the same time (i.e., immediately after provisionally accepting the session, not waiting for the initiator to begin or finish sending candidates), the responder also begins sending candidates that may work for it. As above, the initiator acknowledges receipt of the candidates.</p>
      <p>As the initiator and responder receive candidates, they probe the various candidate transports for connectivity. In performing these connectivity checks, a client SHOULD follow the procedure specified in Section 7 of &icecore;.</p>
      <example caption="Initiator sends a candidate"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='info1' 
    to='juliet@capulet.com/balcony' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns' 
          action='transport-info'
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='this-is-the-audio-content' profile='RTP/AVP'>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'>
        <candidate component='1'
                   foundation='1'
                   generation='0' 
                   ip='10.0.1.1' 
                   network='0'
                   port='8998'
                   priority='2114978302'
                   protocol='udp'
                   pwd='asd88fgpdd777uzjYhagZg'
                   type='host'
                   ufrag='8hhy'/>
      </transport>
    </content>
  </jingle>
</iq>
      ]]></example>
      <example caption="Initiator sends a second candidate"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='info2' 
    to='juliet@capulet.com/balcony' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns' 
          action='transport-info' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='this-is-the-audio-content' profile='RTP/AVP'>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'>
        <candidate component='1'
                   foundation='1'
                   generation='0' 
                   ip='192.0.2.3' 
                   network='1'
                   port='45664'
                   priority='1678246398'
                   protocol='udp'
                   pwd='asd88fgpdd777uzjYhagZg'
                   type='srflx'
                   ufrag='8hhy'/>
      </transport>
    </content>
  </jingle>
</iq>
      ]]></example>
      <example caption="Initiator sends a third candidate"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='info3' 
    to='juliet@capulet.com/balcony' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns' 
          action='transport-info' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='this-is-the-audio-content' profile='RTP/AVP'>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'>
        <candidate component='1'
                   foundation='1'
                   generation='0' 
                   ip='208.245.212.67' 
                   network='2'
                   port='53267'
                   priority='1677984254'
                   protocol='udp'
                   pwd='asd88fgpdd777uzjYhagZg'
                   type='srflx'
                   ufrag='8hhy'/>
      </transport>
    </content>
  </jingle>
</iq>
      ]]></example>
      <p>For each candidate received, the other party MUST acknowledge receipt or return an error:</p>
      <example caption="Responder acknowledges receipt"><![CDATA[
<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info1' type='result'/>

<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info2' type='result'/>

<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info3' type='result'/>
      ]]></example>
    </section3>
  </section2>
  <section2 topic='Acceptance of Successful Candidate' anchor='protocol-acceptance'>
    <p>If, based on STUN connectivity checks, the responder determines that it will be able to establish a connection using a given candidate, it sends a &JINGLE; element with an action of 'content-accept' (or 'session-accept') to the initiator, specifying the candidate that succeeded:</p>
    <example caption="Responder definitively accepts the successful candidate"><![CDATA[
<iq from='juliet@capulet.com/balcony' 
    id='accept1' 
    to='romeo@montague.net/orchard' 
    type='set'>
  <jingle xmlns='http://www.xmpp.org/extensions/xep-0166.html#ns'
          action='content-accept' 
          initiator='romeo@montague.net/orchard'
          responder='juliet@capulet.com/balcony'
          sid='a73sjjvkla37jfea'>
    <content creator='initiator' name='this-is-the-audio-content' profile='RTP/AVP'>
      <transport xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'>
        <candidate component='1'
                   foundation='1'
                   generation='0' 
                   ip='192.0.2.3' 
                   network='1'
                   port='45664'
                   priority='1107821052'
                   protocol='udp'
                   pwd='asd88fgpdd777uzjYhagZg'
                   type='srflx'
                   ufrag='8hhy'/>
      </transport>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The &JINGLE; element in the content-accept stanza SHOULD possess a 'responder' attribute that explicitly specifies the full JID of the responding entity. If the 'responder' attribute is provided, all future commmunications SHOULD be sent to the JID provided in the 'responder' attribute.</p> 
    <p>If the initiator can also send data over that candidate, then it acknowledges the responder's acceptance:</p>
    <example caption="Initiator acknowledges acceptance of successful candidate"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='accept1'
    to='juliet@capulet.com/balcony' 
    type='result'/>
    ]]></example>
    <p>Now the initiator and responder can begin sending data over the negotiated connection.</p>
    <p>If a candidate succeeded for the responder but the initiator cannot send data over that candidate, it MUST return a &notacceptable; error in response to the responder's acceptance of the successful candidate:</p>
    <example caption="Initiator returns error in response to acceptance of successful candidate"><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='accept1'
    to='juliet@capulet.com/balcony' 
    type='error'>
  <error type='cancel'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
    ]]></example>
    <p>If the responder cannot find a suitable candidate transport or it receives a &notacceptable; error from the initiator in response to its acceptance of a suitable transport, it SHOULD terminate the session as described in Section 6.8 of <cite>XEP-0166</cite>.</p>
  </section2>
</section1>

<section1 topic='Determining Support' anchor='support'>
  <p>If an entity supports the Jingle ice-udp transport, it MUST return a feature of "http://www.xmpp.org/extensions/xep-0176.html#ns-udp" &NSNOTE; in response to &xep0030; information requests.</p>
  <example caption="Service discovery information request"><![CDATA[
<iq from='romeo@montague.net/orchard'
    id='disco1'
    to='juliet@capulet.com/balcony'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service discovery information response"><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='disco1'
    to='romeo@montague.net/orchard'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'/>
    ...
  </query>
</iq>
  ]]></example>
  <p>If an entity supports the Jingle ice-tcp transport, it MUST return a feature of "http://www.xmpp.org/extensions/xep-0176.html#ns-tcp" &NSNOTE; in response to <cite>XEP-0030</cite> information requests.</p>
  <example caption="Service discovery information request"><![CDATA[
<iq from='romeo@montague.net/orchard'
    id='disco3'
    to='juliet@capulet.com/balcony'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
  ]]></example>
  <example caption="Service discovery information response"><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='disco2'
    to='romeo@montague.net/orchard'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    ...
    <feature var='http://www.xmpp.org/extensions/xep-0176.html#ns-tcp'/>
    ...
  </query>
</iq>
  ]]></example>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <p>In order to speed the negotiation process so that media can flow as quickly as possible, the initiatior should gather and priorities candidates in advance or as soon as the principal begins the process of initiating a session.</p>
</section1>

<section1 topic='Deployment Notes' anchor='deploy'>
  <p>This specification applies exclusively to Jabber/XMPP clients and places no additional requirements on Jabber/XMPP servers. However, service administrators may wish to deploy a STUN server in order to ease the client-to-client negotiation process. See &xep0215; for related information.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>In order to secure the data stream that is negotiated via the Jingle ICE transport, implementations SHOULD use encryption methods appropriate to the transport method and media being exchanged (for details regarding audio and video exchanges via RTP, refer to <cite>XEP-0167</cite> and <cite>XEP-0180</cite>).</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>Until this specification advances to a status of Draft, its associated namespaces shall be "http://www.xmpp.org/extensions/xep-0176.html#ns-udp" and "http://www.xmpp.org/extensions/xep-0176.html#ns-tcp"; upon advancement of this specification, the &REGISTRAR; shall issue permanent namespaces in accordance with the process defined in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Jingle Transport Methods' anchor='registrar-transports'>
    <p>The XMPP Registrar shall include "ice-udp" and "ice-tcp" in its registry of Jingle transport methods. The registry submission is as follows:</p>
    <code><![CDATA[
<transport>
  <name>ice-tcp</name>
  <desc>
    A method for negotiation of out-of-band TCP connections with built-in NAT 
    and firewall traversal, equivalent to the IETF's Interactive Connectivity 
    Establishment (ICE) methodology when resulting in the use of TCP as the 
    transport protocol.
  </desc>
  <type>reliable</type>
  <doc>XEP-0176</doc>
</transport>

<transport>
  <name>ice-udp</name>
  <desc>
    A method for negotiation of out-of-band UDP connections with built-in NAT 
    and firewall traversal, equivalent to the IETF's Interactive Connectivity 
    Establishment (ICE) methodology when resulting in the use of UDP as the
    transport protocol.
  </desc>
  <type>lossy</type>
  <doc>XEP-0176</doc>
</transport>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schemas' anchor='schema'>
  <section2 topic='ICE-TCP Transport Method' anchor='schema-tcp'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://www.xmpp.org/extensions/xep-0176.html#ns-tcp'
    xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-tcp'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref='candidate' minOccurs='0' maxOccurs='1'/>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='candidate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='component' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='foundation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='generation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='ip' type='xs:string' use='required'/>
          <xs:attribute name='network' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='port' type='xs:unsignedShort' use='required'/>
          <xs:attribute name='priority' type='xs:positiveInteger' use='required'/>
          <xs:attribute name='protocol' type='xs:NCName' use='required'/>
          <xs:attribute name='pwd' type='xs:string' use='required'/>
          <xs:attribute name='type' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='host'/>
                <xs:enumeration value='prflx'/>
                <xs:enumeration value='relay'/>
                <xs:enumeration value='srflx'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='ufrag' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
    ]]></code>
  </section2>
  <section2 topic='ICE-UDP Transport Method' anchor='schema-udp'>
    <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'
    xmlns='http://www.xmpp.org/extensions/xep-0176.html#ns-udp'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref='candidate' minOccurs='0' maxOccurs='1'/>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='candidate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='component' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='foundation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='generation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='ip' type='xs:string' use='required'/>
          <xs:attribute name='network' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='port' type='xs:unsignedShort' use='required'/>
          <xs:attribute name='priority' type='xs:positiveInteger' use='required'/>
          <xs:attribute name='protocol' type='xs:NCName' use='required'/>
          <xs:attribute name='pwd' type='xs:string' use='required'/>
          <xs:attribute name='type' use='required'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='host'/>
                <xs:enumeration value='prflx'/>
                <xs:enumeration value='relay'/>
                <xs:enumeration value='srflx'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='ufrag' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
    ]]></code>
  </section2>
</section1>
</xep>
