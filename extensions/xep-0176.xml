<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
<!ENTITY ice11 "<cite>ICE-11</cite>">
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle ICE Transport</title>
  <abstract>This document defines a Jingle transport method that results in sending data between two entities using Interactive Connectivity Establishment (ICE) methodology.</abstract>
  &LEGALNOTICE;
  <number>0176</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <jig>Standards JIG</jig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0166</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>ice</shortname>
  &stpeter;
  &joebeda;
  &scottlu;
  &hildjj;
  &seanegan;
  <revision>
    <version>0.4</version>
    <date>2006-09-13</date>
    <initials>psa</initials>
    <remark><p>Updated to track ICE-10; added section on service discovery.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-07-12</date>
    <initials>se/psa</initials>
    <remark><p>Specified that DTMF must use in-band signalling (XEP-0181).</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-03-24</date>
    <initials>psa</initials>
    <remark><p>Recommended use of RTP-native methods for DTMF.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-03-01</date>
    <initials>psa/jb</initials>
    <remark>Initial version (split from XEP-0166).</remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>&xep0166; defines a framework for negotiating and managing out-of-band data sessions over XMPP. In order to provide a flexible framework, the base Jingle specification defines neither data transport methods nor content (session) types, leaving that up to separate specifications. The current document defines a transport method for establishing and managing data connections between XMPP entities, using the &ice; methodology currently being developed within the IETF.</p>
  <p>The process for ICE negotiation is largely the same in Jingle as it is in draft-ietf-mmusic-ice. There are several differences:</p>
  <ul>
    <li>Instead of using SIP as the signalling channel, Jingle uses XMPP as the signalling channel.</li>
    <li>In Jingle, each candidate transport is sent in a separate IQ exchange (rather than sending all candidates at once as in draft-ietf-mmusic-ice); this approach takes advantage of the request-response semantics of the XMPP &IQ; stanza type and enables the parties to send higher-priority candidates earlier in the negotiation.</li>
    <li>Syntax from the Session Description Protocol (see &rfc4566;) is mapped to an XML syntax suitable for sending over the XMPP signalling channel.</li>
  </ul>
  <p><em>Note: This document depends on the IETF's Interactive Connectivity Establishment (ICE) specification, which is a work in progress. Every effort has been made to keep this document synchronized with draft-ietf-mmusic-ice, for which the latest published version is 11 (hereafter referred to as "&ice11;"). The interested reader is referred to the &ice11; for a detailed description of the ICE methodology, which for the most part this document merely maps to XMPP syntax.</em></p>
  <p><em>Note: This document still needs to be updated to track the changes between ICE-10 and ICE-11. That work will be completed as soon as possible.</em></p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The Jingle transport method defined herein is designed to meet the following requirements:</p>
  <ol>
    <li>Make it possible to establish and manage out-of-band connections between two XMPP entities, even if they are behind Network Address Translators (NATs) or firewalls.</li>
    <li>Make it relatively easy to implement support in standard Jabber/XMPP clients.</li>
    <li>Where communication with non-XMPP entities is needed, push as much complexity as possible onto server-side gateways between the XMPP network and the non-XMPP network.</li>
  </ol>
</section1>
<section1 topic='Glossary' anchor='terms'>
  <p>The reader is referred to draft-ietf-mmusic-ice for a description of various terms used in the context of ICE. Those terms are not reproduced here.</p>
</section1>
<section1 topic='Protocol Description' anchor='protocol'>
  <section2 topic='Transport Initiation' anchor='protocol-initiate'>
    <p>In order for the initiator in a Jingle exchange to start the negotiation, it MUST send a Jingle "session-initiate" stanza as described in <cite>XEP-0166</cite>. This stanza MUST include at least one transport method. If the initiator wishes to negotiate the ICE transport, it MUST include an empty &TRANSPORT; child element qualified by the 'http://jabber.org/protocol/jingle/transport/ice' namespace.</p>
    <example caption="Initiation"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='jingle1' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='session-initiate' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <content name='this-is-the-audio-content'>
      <description xmlns='http://jabber.org/protocol/jingle/description/audio'>
        ...
      </description>
      <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'/>
      <transport xmlns='http://jabber.org/protocol/jingle/transport/raw-udp'>
        ...
      </transport>
    </content>
  </jingle>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Target Entity Response' anchor='protocol-response'>
    <p>As described in <cite>XEP-0166</cite>, to provisionally accept the session initiation request, the responder returns an IQ-result:</p>
    <example caption="Target Entity Provisionally Accepts the Session Request"><![CDATA[
<iq type='result' from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='jingle1'/>
    ]]></example>
  </section2>
  <section2 topic='ICE Negotiation' anchor='protocol-negotiate'>
    <p>If the responder provisionally accepts the session initiation request as shown above, both initiator and responder MUST immediately negotiate connectivity over the ICE transport by exchanging XML-formatted candidate transports for the channel. This negotiation proceeds immediately in order to maximize the possibility that media can be exchanged as quickly as possible. <note>Concurrent with negotiation of the ICE candidates, it is possible for the initiator and responder to negotiate which content types the session will include, which transport methods will be tried for each content type, etc. Those negotiation flows are shown in <cite>XEP-0166</cite>. This document specifies only negotiation of the ICE transport method.</note></p>
    <p>The candidate syntax and negotiation flow are described below.</p>
    <section3 topic='Syntax of Candidate Element' anchor='protocol-negotiate-candidate'>
      <p>The following is an example of the candidate format:</p>
      <example caption="Initiating Entity Sends a Candidate Transport"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='info1' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='transport-info'
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='1'
                 foundation='1'
                 generation='0' 
                 ip='10.0.1.1' 
                 network='0'
                 port='8998'
                 priority='9909'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='local'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
</iq>
      ]]></example>
      <p>The attributes of the &lt;candidate/&gt; element are described in the following table:</p>
      <table caption='Candidate Attributes'>
        <tr>
          <th>Name</th>
          <th>Description</th>
          <th>SDP Syntax</th>
          <th>Example</th>
        </tr>
        <tr>
          <td>component</td>
          <td>A Component ID as defined in &ice11;</td>
          <td>Component ID value in a=candidate line</td>
          <td>1</td>
        </tr>
        <tr>
          <td>foundation</td>
          <td>A Foundation as defined in &ice11;</td>
          <td>Foundation value in a=candidate line</td>
          <td>1</td>
        </tr>
        <tr>
          <td>generation</td>
          <td>An index, starting at 0, that enables the parties to keep track of updates to the candidate throughout the life of the session</td>
          <td>N/A</td>
          <td>0</td>
        </tr>
        <tr>
          <td>ip</td>
          <td>The Internet Protocol (IP) address for the candidate transport mechanism; this may be either an IPv4 address or an IPv6 address</td>
          <td>IP Address value in a=candidate line</td>
          <td>10.0.1.1</td>
        </tr>
        <tr>
          <td>network</td>
          <td>An index, starting at 0, referencing which network this candidate is on for a given peer (used for diagnostic purposes if the calling hardware has more than one Network Interface Card or NIC)</td>
          <td>N/A</td>
          <td>0</td>
        </tr>
        <tr>
          <td>port</td>
          <td>The port at the candidate IP address</td>
          <td>Port value in a=candidate line</td>
          <td>8998</td>
        </tr>
        <tr>
          <td>priority</td>
          <td>A Priority as defined in &ice11;</td>
          <td>Priority value in a=candidate line</td>
          <td>9909</td>
        </tr>
        <tr>
          <td>protocol</td>
          <td>The protocol to be used; allowable values are: "udp" (when standard &ice11; is used); "tcp", "tcp-act", and "tcp-pass" (when &ice-tcp; is used); and "ssltcp" (definition to follow)</td>
          <td>a=ice-ufrag line</td>
          <td>udp</td>
        </tr>
        <tr>
          <td>pwd</td>
          <td>A Password as defined in &ice11;</td>
          <td>a=ice-pwd line</td>
          <td>asd88fgpdd777uzjYhagZg</td>
        </tr>
        <tr>
          <td>type</td>
          <td>A Candidate Type as defined in &ice11;; the allowable values are "host" for host candidates, "srflx" for server reflexive candidates, "prflx" for peer reflexive candidates, and "relay" for relayed candidates</td>
          <td>Typ field in a=candidate line</td>
          <td>srflx</td>
        </tr>
        <tr>
          <td>ufrag</td>
          <td>A User Fragment as defined in &ice11;</td>
          <td>a=ice-ufrag line</td>
          <td>8hhy</td>
        </tr>
      </table>
    </section3>
    <section3 topic='Negotiation Flow' anchor='protocol-negotiate-flow'>
      <p>The first step in negotiating connectivity is for each client to immediately begin sending candidate transport methods to the other client. These candidates SHOULD be gathered by following the procedure specified in Section 4.1 of &ice11; and prioritized by following the procedure specified in Section 4.2 of &ice11;. Each candidate MUST be sent in a &JINGLE; element with an action of "transport-info".</p>
      <p>If the responder receives and can successfully process a given candidate, it returns an IQ-result (if not, for example because the candidate data is improperly formatted, it returns an error).</p>
      <p>Note well that the responder is only indicating receipt of the candidate, not telling the initiator that the candidate will be used.</p>
      <p>The initiator keeps sending candidates, one after the other (without stopping to receive an acknowledgement of receipt from the responder for each candidate) until it has exhausted its supply of possible or desirable candidate transports. (Because certain candidates may be more "expensive" in terms of bandwidth or processing power, the initiator may not want to advertise their existence unless necessary.) For each candidate, the responder acknowledges receipt.</p>
      <p>At the same time (i.e., immediately after provisionally accepting the session, not waiting for the initiator to begin or finish sending candidates), the responder also begins sending candidates that may work for it. As above, the initiator acknowledges receipt of the candidates.</p>
      <p>As the initiator and responder receive candidates, they probe the various candidate transports for connectivity. In performing these connectivity checks, client SHOULD follow the procedure specified in Section 7 of &ice11;.</p>
      <example caption="Initiating Entity Sends a Candidate"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='info1' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='transport-info'
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='1'
                 foundation='1'
                 generation='0' 
                 ip='10.0.1.1' 
                 network='0'
                 port='8998'
                 priority='9909'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='local'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
</iq>
      ]]></example>
      <example caption="Initiating Entity Sends a Second Candidate"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='info2' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='transport-info' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='2'
                 foundation='1'
                 generation='0' 
                 ip='192.0.2.3' 
                 network='1'
                 port='45664'
                 priority='8999'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='srflx'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
</iq>
      ]]></example>
      <example caption="Initiating Entity Sends a Third Candidate"><![CDATA[
<iq to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='info3' type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle' 
          action='transport-info' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='2'
                 foundation='1'
                 generation='0' 
                 ip='208.245.212.67' 
                 network='2'
                 port='53267'
                 priority='8909'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='srflx'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
</iq>
      ]]></example>
      <p>For each candidate received, the other party MUST acknowledge receipt or return an error:</p>
      <example caption="Receiving Entity Acknowledges Receipt"><![CDATA[
<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info1' type='result'/>

<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info2' type='result'/>

<iq from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='info3' type='result'/>
      ]]></example>
    </section3>
  </section2>
  <section2 topic='Acceptance of Successful Candidate' anchor='protocol-acceptance'>
    <p>If, based on STUN connectivity checks, the responder determines that it will be able to establish a connection using a given candidate, it sends a &JINGLE; element with an action of 'transport-accept' to the initiator, specifying the candidate that succeeded:</p>
    <example caption="Juliet Definitively Accepts the Successful Candidate"><![CDATA[
<iq type='set' from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' id='accept1'>
  <jingle xmlns='http://jabber.org/protocol/jingle'
          action='transport-accept' 
          initiator='romeo@montague.net/orchard'
          responder='juliet@capulet.com/balcony'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='2'
                 foundation='1'
                 generation='0' 
                 ip='192.0.2.3' 
                 network='1'
                 port='45664'
                 priority='5909'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='srflx'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
</iq>
    ]]></example>
    <p>The &JINGLE; element in the transport-accept stanza SHOULD possess a 'responder' attribute that explicitly specifies the full JID of the responding entity. If provided, all future commmunications SHOULD be sent to the JID provided in the 'responder' attribute.</p> 
    <p>If the initiator can also send data over that candidate, then it acknowledges the responder's acceptance:</p>
    <example caption="Romeo Acknowledges Acceptance of Successful Candidate"><![CDATA[
<iq type='result' to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='accept1'/>
    ]]></example>
    <p>Now the initiator and responder can begin sending data over the negotiated connection.</p>
    <p>If a candidate succeeeded for the responder but the initiator cannot send data over that candidate, it MUST return a &notacceptable; error in response to the responder's acceptance of the successful candidate:</p>
    <example caption="Romeo Returns Error in Response to Acceptance of Successful Candidate"><![CDATA[
<iq type='errror' to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='accept1'>
  <jingle xmlns='http://jabber.org/protocol/jingle'
          action='transport-accept' 
          initiator='romeo@montague.net/orchard'
          responder='juliet@capulet.com/balcony'
          sid='a73sjjvkla37jfea'>
    <transport xmlns='http://jabber.org/protocol/jingle/transport/ice'>
      <candidate component='2'
                 foundation='1'
                 generation='0' 
                 ip='192.0.2.3' 
                 network='1'
                 port='45664'
                 priority='5909'
                 protocol='udp'
                 pwd='asd88fgpdd777uzjYhagZg'
                 type='srflx'
                 ufrag='8hhy'/>
    </transport>
  </jingle>
  <error type='cancel'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
    ]]></example>
    <p>If the responder cannot find a suitable candidate transport or it receives a &notacceptable; errror from the initiator in response to its acceptance of a suitable transport, it SHOULD terminate the session as described below.</p>
  </section2>
  <section2 topic='Termination' anchor='protocol-terminate'>
    <p>In order to gracefully end the session, either the responder or the initiator MUST a send a "terminate" action to the other party:</p>
    <example caption="Juliet Terminates the Session"><![CDATA[
<iq from='juliet@capulet.com/balcony' 
    id='term1' 
    to='romeo@montague.net/orchard' 
    type='set'>
  <jingle xmlns='http://jabber.org/protocol/jingle'
          action='terminate' 
          initiator='romeo@montague.net/orchard'
          sid='a73sjjvkla37jfea'/>
</iq>
    ]]></example>
    <p>The initiator then acknowledges termination of the session:</p>
    <example caption="Romeo Acknowledges Termination"><![CDATA[
<iq type='result' to='juliet@capulet.com/balcony' from='romeo@montague.net/orchard' id='term1'/>
    ]]></example>
    <p>Unfortunately, not all sessions end gracefully. The following events MUST be considered session-ending events, and any further communication for the session type MUST be completed through negotiation of a new session:</p>
    <ul>
      <li>Receipt of a 'redirect' or 'terminate' action from the other party.</li>
      <li>Receipt of &UNAVAILABLE; from the other party.</li>
    </ul>
    <p>In particular, one party MUST consider the session to be in the ENDED state if it receives presence of type "unavailable" from the other party:</p>
    <example caption="Juliet Goes Offline"><![CDATA[
<presence from='juliet@capulet.com/balcony' to='romeo@montague.net/orchard' type='unavailable'/>
    ]]></example>
    <p>Naturally, in this case there is nothing for the initiator to acknowledge.</p>
  </section2>
</section1>

<section1 topic='Service Discovery' anchor='disco'>
  <p>If an entity supports this specification, it MUST return a feature of "http://jabber.org/protocol/jingle/transport/ice" in response to &xep0030; information requests.</p>
  <p>As mentioned in the <link url='#deploy'>Deployment Notes</link> of this document, server administrators may wish to deploy STUN servers in order to ease the process of negotiating use of the Jingle ICE transport. If a STUN server is accessible via XMPP, it SHOULD be advertised by returning an appropriate item in response to service discovery item requests sent to the address of an XMPP server:</p>
  <example caption="Service Discovery of STUN Server (1)"><![CDATA[
<iq from='romeo@montague.net/orchard' to='montague.net' id='disco1' type='get'>
  <query xmlns='http://jabber.org/protocol/disco#items'/>
</iq>

<iq from='montague.net' to='romeo@montague.net/orchard' id='disco1' type='result'>
  <query xmlns='http://jabber.org/protocol/disco#items'>
    <item jid='stun.montague.net'/>
  </query>
</iq>
  ]]></example>
  <p>A subsequent service discovery information request to the STUN server MUST result in a response indicating that the STUN server has a service discovery category of "proxy" and type of "stun":</p>
  <example caption="Service Discovery of STUN Server (2)"><![CDATA[
<iq from='romeo@montague.net/orchard' to='stun.montague.net' id='disco2' type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

<iq from='stun.montague.net' to='romeo@montague.net/orchard' id='disco1' type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='proxy' type='stun'/>
    <feature var='http://jabber.org/protocol/disco#info'/>
  </query>
</iq>
  ]]></example>
  <p>Because the XMPP interaction is necessary only in order to discover the identity of the STUN server, only support for the "http://jabber.org/protocol/disco#info" feature is RECOMMEND.</p>
  <p>It is OPTIONAL for a STUN server to support XMPP, and STUN servers may be configured into an XMPP client via other means (e.g., user configuration or default settings). Client developers SHOULD NOT depend on the existence of XMPP-aware STUN servers.</p>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='DTMF' anchor='impl-dtmf'>
    <p>If it is necessary to send Dual Tone Multi-Frequency (DTMF) tones, it is REQUIRED to use the XML format specified &xep0181;.</p>
  </section2>
</section1>

<section1 topic='Deployment Notes' anchor='deploy'>
  <p>This specification applies exclusively to Jabber/XMPP clients and places no additional requirements on Jabber/XMPP servers. However, service administrators may wish to deploy a STUN server in order to ease the client-to-client negotiation process.</p>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <section2 topic='End-to-End Data Encryption' anchor='security-e2e'>
    <p>In order to secure the end-to-end data stream, implementations SHOULD use encryption methods appropriate to the transport method in use.</p>
  </section2>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>The &REGISTRAR; shall include 'http://jabber.org/protocol/jingle/transport/ice' in its registry of protocol namespaces.</p>
  </section2>
  <section2 topic='Jingle Transport Methods' anchor='registrar-transports'>
    <p>The XMPP Registrar shall include "http://jabber.org/protocol/jingle/transport/ice" in its registry of Jingle transport methods. The registry submission is as follows:</p>
    &REGPROCESS;
    <code><![CDATA[
<transport>
  <name>ice</name>
  <desc>
    A method for negotiation of out-of-band connections with built-in NAT and firewall traversal, 
    similar to the IETF's Interactive Connectivity Establishment (ICE) methodology.
  </desc>
  <doc>XEP-0176</doc>
</transport>
    ]]></code>
  </section2>
  <section2 topic='Service Discovery Identity' anchor='registrar-disco'>
    <p>The XMPP Registrar shall include a Service Discovery type of "stun" within the "proxy" category.</p>
    <p>The registry submission is as follows:</p>
    <code><![CDATA[
<category>
  <name>proxy</name>
  <type>
    <name>stun</name>
    <desc>a STUN (Simple Traversal of UDP Through NATs) service per RFC 3489</desc>
    <doc>XEP-0176</doc>
  </type>
</category>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schemas' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/jingle/transport/ice'
    xmlns='http://jabber.org/protocol/jingle/transport/ice'
    elementFormDefault='qualified'>

  <xs:element name='transport'>
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref='candidate' minOccurs='0' maxOccurs='1'/>
        </xs:sequence>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name='candidate'>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='component' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='foundation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='generation' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='ip' type='xs:string' use='required'/>
          <xs:attribute name='network' type='xs:unsignedByte' use='required'/>
          <xs:attribute name='port' type='xs:unsignedShort' use='required'/>
          <xs:attribute name='priority' type='xs:positiveInteger' use='required'/>
          <xs:attribute name='pwd' type='xs:string' use='required'/>
          <xs:attribute name='type' use='optional'>
            <xs:simpleType>
              <xs:restriction base='xs:NCName'>
                <xs:enumeration value='host'/>
                <xs:enumeration value='prflx'/>
                <xs:enumeration value='relay'/>
                <xs:enumeration value='srflx'/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name='ufrag' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>
</xep>
