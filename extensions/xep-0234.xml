<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Jingle File Transfer</title>
  <abstract>This specification defines a Jingle application type for transferring files between two entities. The protocol provides a modular framework that enables the exchange of information about the file to be transferred as well as the negotiation of parameters such as the transport to be used.</abstract>
  &LEGALNOTICE;
  <number>0234</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0047</spec>
    <spec>XEP-0065</spec>
    <spec>XEP-0096</spec>
    <spec>XEP-0166</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  &stpeter;
  <revision>
    <version>0.9</version>
    <date>2009-02-11</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Moved Jingle definitions of IBB and S5B transports to standalone documents.</li>
        <li>Because the jingle-ibb and jingle-s5b transport methods are backwards-incompatible, incremented protocol version number from 0 to 1 and changed namespace from urn:xmpp:jingle:apps:file-transfer:0 to urn:xmpp:jingle:apps:file-transfer:1.</li>
        <li>Simplified fallback flow by removing transport-accept round trip.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2008-09-30</date>
    <initials>psa</initials>
    <remark><p>Corrected fallback scenario to use transport-replace and transport-accept.</p></remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2008-09-25</date>
    <initials>psa</initials>
    <remark>
      <ul>
        <li>Deleted content-replace from session flows.</li>
        <li>Modified namespaces to incorporate namespace versioning.</li>
        <li>Cleaned up XML schemas.</li>
      </ul>
    </remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2008-07-31</date>
    <initials>psa</initials>
    <remark><p>Harmonized with XEP-0166; modified fallback to use transport-replace and transport-accept.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2008-06-05</date>
    <initials>psa</initials>
    <remark><p>Modified fallback scenario to use content-replace action during pending state.</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2008-06-04</date>
    <initials>psa</initials>
    <remark><p>Harmonized negotiation flows with other Jingle application types.</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2008-05-29</date>
    <initials>psa</initials>
    <remark><p>Corrected and more clearly explained negotiation flows for consistency with XEP-0166 and other Jingle specifications.</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2008-03-20</date>
    <initials>psa</initials>
    <remark><p>Added transport negotiation scenario.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2008-03-05</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.3</version>
    <date>2008-02-29</date>
    <initials>psa</initials>
    <remark><p>Corrected use of content-replace action; specified that the In-Band Bytestreams transport method is mandatory-to-implement but must have the lowest preference order.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2008-02-28</date>
    <initials>psa</initials>
    <remark>Modified negotiation flow to use new content-replace action.</remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2008-01-29</date>
    <initials>psa</initials>
    <remark>First draft.</remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <p>&xep0096; defines the current XMPP protocol extension for file transfer. However, that protocol has several drawbacks, most related to the &xep0095; protocol on which it depends:</p>
  <ol>
    <li>It does not enable a true, bidirectional negotiation; instead, the initiator sets the terms for the file transfer and the responder either accepts the terms or cancels the negotiation.</li>
    <li>It is the only technology in the Jabber/XMPP protocol "stack" that uses <cite>XEP-095: Stream Initiation</cite>. More modern technologies such as voice and video session negotiation use &xep0166;, and it would be helpful if implementors could use the same code for all negotiation use cases.</li>
  </ol>
  <p>To overcome these drawbacks, this specification defines a file transfer negotiation method that meets the following requirements:</p>
  <ul>
    <li>Reuse the session negotiation semantics from <cite>XEP-0166</cite>.</li>
    <li>Reuse the file description format from <cite>XEP-0096</cite>.</li>
    <li>Define a clear upgrade path from <cite>XEP-0096</cite> to this specification.</li>
  </ul>
  <p>Jingle file transfer is only as reliable as the transports on which it depends. In particular, SOCKS5 Bytestreams ("S5B") does not always result in NAT or firewall traversal. To work around that problem, this specification requires all implementations to support In-Band Bytestreams ("IBB"), which tends to result in a successful (if slow) file transfer. It is likely that a future version of this specification will also recommend implementation of a Jingle transport method that emulates the IETF's ICE-TCP technology, which is currently a work in progress (see &ice-tcp;); however, a Jingle ICE-TCP transport method is dependent on the outcome of IETF work in this area.</p>
</section1>

<section1 topic='How It Works' anchor='protocol'>
  <p>This section provides a friendly introduction to Jingle file transfer.</p>
  <p>First, the party that wishes to initiate the file transfer determines the responder's capabilities (via &xep0030; or &xep0115;). Here we assume that the responder supports the following service discovery features (note: these features may not reflect final namespace assignments):</p>
  <ul>
    <li>urn:xmpp:jingle:0 as described in XEP-0166</li>
    <li>urn:xmpp:jingle:apps:file-transfer:1 as defined in this document</li>
    <li>urn:xmpp:jingle:transports:s5b:0 as defined in xep-jingle-s5b (currently located at <link url='http://xmpp.org/extensions/inbox/jingle-s5b.html'>http://xmpp.org/extensions/inbox/jingle-s5b.html</link>)</li>
    <li>urn:xmpp:jingle:transports:ibb:0 as defined in xep-jingle-ibb (currently located at <link url='http://xmpp.org/extensions/inbox/jingle-ibb.html'>http://xmpp.org/extensions/inbox/jingle-ibb.html</link>)</li>
  </ul>
  <p>The initiator then sends a Jingle session-initiation request to a potential responder. The content-type of the request specifies two things:</p>
  <ol>
    <li>An application type of "urn:xmpp:jingle:apps:file-transfer:1" &VNOTE;. In particular, the &lt;description/&gt; element contains an &lt;offer/&gt; or &lt;request/&gt; element that in turn contains a &lt;file/&gt; element qualified by the existing 'http://jabber.org/protocol/si/profile/file-transfer' namespace from <cite>XEP-0096</cite>.</li>
    <li>An appropriate transport method. So far the suggested methods are jingle-s5b and, as a fallback, jingle-ibb.</li>
  </ol>
  <p>In this example, the initiator is &lt;romeo@montague.lit&gt;, the responder is &lt;juliet@capulet.lit&gt;, and the initiation request specifies a file offer and a transport method of jingle-s5b (i.e., XEP-0065).</p>
  <p>The flow is as follows.</p>
  <code><![CDATA[
Initiator                    Responder
   |                             |
   |   session-initiate          |
   |   (with S5B)                |
   |---------------------------->|
   |   ack                       |
   |<----------------------------|
   |   session-accept            |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |   [ file transfer ]         |
   |============================>|
   |   session-terminate         |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |                             |
  ]]></code>
  <p>First the initiator sends a Jingle session-initiate.</p>
  <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='nzu25s8'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:1'>
        <offer>
          <file xmlns='http://jabber.org/protocol/si/profile/file-transfer'
                name='test.txt'
                size='1022'
                hash='552da749930852c69ae5d2141d3766b1'
                date='1969-07-21T02:56:15Z'>
            <desc>This is a test. If this were a real file...</desc>
          </file>
        </offer>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y' 
        	 mode='tcp'>
        <streamhost 
            jid='romeo@montague.lit/orchard' 
            host='192.168.4.1' 
            port='5086'/>
        <streamhost 
            jid='streamer.shakespeare.lit' 
            host='24.24.24.1' 
            zeroconf='_jabber.bytestreams'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The responder immediately acknowledges receipt of the Jingle session-initiate.</p>
  <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='nzu25s8'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>The initiator then attempts to initiate a SOCKS5 Bytestream with the responder as described in xep-jingle-s5b and <cite>XEP-0065</cite>.</p>
  <p>If the responder is able to connect to one of the streamhosts, it returns a Jingle session-accept (including only the JID of the streamhost to which it connected).</p>
  <example caption="Responder sends session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='accept1'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:1'>
        <offer>
          <file xmlns='http://jabber.org/protocol/si/profile/file-transfer'
                name='test.txt'
                size='1022'
                hash='552da749930852c69ae5d2141d3766b1'
                date='1969-07-21T02:56:15Z'>
            <desc>This is a test. If this were a real file...</desc>
          </file>
        </offer>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'>
        <streamhost jid='streamer.shakespeare.lit'/>
      </transport>
    </content>
  </jingle>
</iq>
  ]]></example>
  <p>The initiator acknowledges the Jingle session-accept.</p>
  <example caption="Initiator acknowledges session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='accept1'
    to='romeo@montague.lit/orchard'
    type='result'/>
  ]]></example>
  <p>Now the parties exchange the file using SOCKS5 Bytestreams.</p>
  <p>Once the transfer is completed, either party can terminate the Jingle session.</p>
  <p>More detailed scenarios follow.</p>
</section1>

<section1 topic='Scenarios' anchor='scenarios'>
  <section2 topic='Fallback' anchor='fallback'>
    <p>Currently, <cite>XEP-0096</cite> does not enable the parties to fall back to a second method (e.g., In-Band Bytestreams) if the first method tried (e.g., SOCKS5 Bytestreams) does not work. This problem is addressed by Jingle. Such a fallback scenario is especially helpful when re-using the existing SOCKS5 Bytestreams method, since if a SOCKS5 relay is not available then the S5B method does not necessarily result in NAT or firewall traversal and therefore can result in a failed attempt at setting up the initial transport. However, because In-Band Bytestreams almost always succeeds (except if the parties violate rate-limiting policies at their servers), it provides a reliable transfer method of last resort. To provide seamless fallback, the initiator or responder can counter-propose IBB if S5B setup fails.</p>
    <p>The session flow is as follows.</p>
    <code><![CDATA[
Initiator                    Responder
   |                             |
   |   session-initiate (S5B)    |
   |---------------------------->|
   |   ack                       |
   |<----------------------------|
   |   [ SOCKS5 failure! ]       |
   |x---------------------------x|
   |   transport-replace (IBB)   |
   |---------------------------->|
   |   ack                       |
   |<----------------------------|
   |   session-accept            |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |   [ file transfer via IBB]  |
   |============================>|
   |   terminate                 |
   |<----------------------------|
   |   ack                       |
   |---------------------------->|
   |                             |
    ]]></code>
    <p>The protocol flow is as follows.</p>
    <p>First the initiator sends a Jingle session-initiate, in this case with a transport of SOCKS5 Bytestreams.</p>
    <example caption="Initiator sends session-initiate"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='jingle1'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-initiate'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:1'>
        <offer>
          <file xmlns='http://jabber.org/protocol/si/profile/file-transfer'
                name='test.txt'
                size='1022'
                hash='552da749930852c69ae5d2141d3766b1'
                date='1969-07-21T02:56:15Z'>
            <desc>This is a test. If this were a real file...</desc>
          </file>
        </offer>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:s5b:0'
                 sid='vj3hs98y' 
        	 mode='tcp'>
        <streamhost 
            jid='romeo@montague.lit/orchard' 
            host='192.168.4.1' 
            port='5086'/>
        <streamhost 
            jid='streamer.shakespeare.lit' 
            host='24.24.24.1' 
            zeroconf='_jabber.bytestreams'/>
      </transport>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The responder immediately acknowledges receipt of the session-initiate.</p>
    <example caption="Responder acknowledges session-initiate"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='jingle1'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
    <p>The initiator then attempts to initiate a SOCKS5 Bytestream with the responder as defined in xep-jingle-s5b and XEP-0065. Here we assume that the responder tries but is unable to connect to any of the StreamHosts. However, all is not lost, because the parties can attempt to fall back to In-Band Bytestreams. Therefore the initiator sends a transport-replace action including a transport of IBB.</p>
    <example caption="Initiator replaces transport with IBB"><![CDATA[
<iq from='romeo@montague.lit/orchard'
    id='hs92n57'
    to='juliet@capulet.lit/balcony'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='transport-replace'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='ch3d9s71'/>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The responder then acknowledges the transport-replace action.</p>
    <example caption="Responder acknowledges transport-replace"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='hs92n57'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
    <p>If the transport replacement is acceptable, the responder then sends a session-accept action to the initiator (if not, the responder sends a transport-reject action).</p>
    <example caption="Responder sends session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='is71ns63'
    to='romeo@montague.lit/orchard'
    type='set'>
  <jingle xmlns='urn:xmpp:jingle:0'
          action='session-accept'
          initiator='romeo@montague.lit/orchard'
          sid='851ba2'>
    <content creator='initiator' name='a-file-offer'>
      <description xmlns='urn:xmpp:jingle:apps:file-transfer:1'>
        <offer>
          <file xmlns='http://jabber.org/protocol/si/profile/file-transfer'
                name='test.txt'
                size='1022'
                hash='552da749930852c69ae5d2141d3766b1'
                date='1969-07-21T02:56:15Z'>
            <desc>This is a test. If this were a real file...</desc>
          </file>
        </offer>
      </description>
      <transport xmlns='urn:xmpp:jingle:transports:ibb:0'
                 block-size='4096'
                 sid='ch3d9s71'/>
    </content>
  </jingle>
</iq>
    ]]></example>
    <p>The initiator acknowledges the Jingle session-accept action.</p>
    <example caption="Initiator acknowledges session-accept"><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    id='is71ns63'
    to='romeo@montague.lit/orchard'
    type='result'/>
    ]]></example>
    <p>Now the initiator sends the file using In-Band Bytestreams as defined in xep-jingle-ibb and <cite>XEP-0047</cite>.</p>
  </section2>
</section1>

<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Mandatory to Implement Technologies' anchor='impl-mti'>
    <p>All implementations MUST support the In-Band Bytestreams transport method as a reliable method of last resort. An implementation SHOULD support other transport methods as well.</p>
  </section2>
  <section2 topic='Preference Order of Transport Methods' anchor='impl-pref'>
    <p>An application MAY present transport methods in any order, except that the In-Band Bytestreams method MUST be the lowest preference.</p>
  </section2>
  <section2 topic='Migration from XEP-0096' anchor='impl-migration'>
    <p>Support for Jingle file transfer can be determined through discovery of the 'urn:xmpp:jingle:apps:file-transfer:1' namespace &VNOTE;, via either service discovery (<cite>XEP-0030</cite>) or entity capabilities (<cite>XEP-0115</cite>). If the initiator knows that the responder supports Jingle file transfer, it SHOULD first attempt negotiation using XEP-0166 rather than XEP-0095.</p>
  </section2>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>In order to secure the data stream, implementations SHOULD use encryption methods appropriate to the transport method being used. For example, end-to-end encryption can be negotiated over either SOCKS5 Bytestreams or In-Band Bytestreams as described in xep-jingle-s5b and xep-jingle-ibb.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>No interaction with &IANA; is required as a result of this document.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='registrar-ns'>
    <p>This specification defines the following XML namespaces:</p>
    <ul>
      <li>urn:xmpp:jingle:apps:file-transfer:1</li>
    </ul>
    <p>Upon advancement of this specification from a status of Experimental to a status of Draft, the &REGISTRAR; shall add the foregoing namespaces to the registry located at &NAMESPACES;, as described in Section 4 of &xep0053;.</p>
  </section2>
  <section2 topic='Namespace Versioning' anchor='registrar-versioning'>
    <p>If the protocol defined in this specification undergoes a major revision that is not fully backward-compatible with an older version, or that contains significant new features, the XMPP Registrar shall increment the protocol version number found at the end of the XML namespaces defined herein, as described in Section 4 of <cite>XEP-0053</cite>.</p>
  </section2>
  <section2 topic='Jingle Application Formats' anchor='registrar-content'>
    <p>The XMPP Registrar shall include "file-transfer" in its registry of Jingle application formats. The registry submission is as follows:</p>
    <code><![CDATA[
<application>
  <name>file-transfer</name>
  <desc>Jingle sessions for the transfer of a file</desc>
  <transport>streaming</transport>
  <doc>XEP-0234</doc>
</application>
    ]]></code>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:jingle:apps:file-transfer:1'
    xmlns='urn:xmpp:jingle:apps:file-transfer:1'
    elementFormDefault='qualified'>

  <xs:import 
      namespace='http://jabber.org/protocol/si/profile/file-transfer'
      schemaLocation='http://www.xmpp.org/schemas/file-transfer.xsd'/>

  <xs:element name='description'>
    <xs:complexType>
      <xs:choice>
        <xs:element name='offer' type='fileTransferElementType'/>
        <xs:element name='request' type='fileTransferElementType'/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:complexType name='fileTransferElementType'>
    <xs:sequence xmlns:ft='http://jabber.org/protocol/si/profile/file-transfer'>
      <xs:element ref='ft:file'/>
    </xs:sequence>
  </xs:complexType>

</xs:schema>
  ]]></code>
</section1>

</xep>
