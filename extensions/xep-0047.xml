<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>In-Band Bytestreams (IBB)</title>
  <abstract>This specification defines an XMPP protocol extension that enables any two entities to establish a one-to-one bytestream between themselves, where the data is broken down into smaller chunks and transported in-band over XMPP.</abstract>
  &LEGALNOTICE;
  <number>0047</number>
  <status>Draft</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0079</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <schemaloc>
    <url>http://www.xmpp.org/schemas/ibb.xsd</url>
  </schemaloc>
  <shortname>ibb</shortname>
  &infiniti;
  &stpeter;
  <revision>
    <version>1.2rc1</version>
    <date>in progress, last updated 2009-02-18</date>
    <initials>psa/jk</initials>
    <remark>Encouraged use of IQ stanzas rather than message stanzas for sending data; clarified bidirectional nature of IBB.</remark>
  </revision>
  <revision>
    <version>1.1</version>
    <date>2006-11-21</date>
    <initials>jk</initials>
    <remark>Allowed IQ for delivery.</remark>
  </revision>
  <revision>
    <version>1.0</version>
    <date>2003-12-10</date>
    <initials>psa</initials>
    <remark>Per a vote of the Jabber Council, advanced status to Draft.</remark>
  </revision>
  <revision>
    <version>0.8</version>
    <date>2003-12-04</date>
    <initials>jk</initials>
    <remark>Add 'block-size' attribute and usage guidelines</remark>
  </revision>
  <revision>
    <version>0.7</version>
    <date>2003-05-23</date>
    <initials>jk</initials>
    <remark>Use IQ for shutdown, remove XEP-0022 dependency, loop the counter</remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2003-05-14</date>
    <initials>jk</initials>
    <remark>Use message for delivery</remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2003-04-06</date>
    <initials>jk</initials>
    <remark>Changed newseq to prevseq, added acks, changed seq size to 32-bit</remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2003-03-22</date>
    <initials>jk</initials>
    <remark>Changed protocol, added sequence id</remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2002-12-10</date>
    <initials>jk</initials>
    <remark>Removed the 'comment' block, changed namespace</remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2002-10-10</date>
    <initials>jk</initials>
    <remark>Revised the text</remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2002-09-29</date>
    <initials>jk</initials>
    <remark>Initial version.</remark>
  </revision>
</header>

<section1 topic='Introduction'>
  <p>This document describes In-Band Bytestreams (or IBB), a reliable bytestream protocol between two Jabber entities over a Jabber XML stream.  The basic idea is that binary data is encoded as Base64 and transferred over the Jabber network.</p>
</section1>

<section1 topic='Uses'>
  <p>IBB is a generic bytestream, and so its usage is left open-ended.  It is likely to be useful for sending small payloads, such as files that would otherwise be too cumbersome to send as an instant message (such as a text file) or impossible to send (such as a small binary image file).  It could also be useful for any kind of low-bandwidth activity, such as a chess game or a shell session.  And, while it is mostly intended as a fallback in situations where a &xep0065; is unavailable, IBB could be more desirable for many of the simple bytestream use-cases that do not have high bandwidth requirements.</p>
</section1>

<section1 topic='Protocol'>
  <section2 topic='Creating a Bytestream'>
    <example caption='Initiation of interaction'><![CDATA[
<iq type='set' 
    from='romeo@montague.net/orchard'
    to='juliet@capulet.com/balcony'
    id='inband_1'>
  <open sid='i781hf64' 
        block-size='4096'
        xmlns='http://jabber.org/protocol/ibb'/>
</iq>
    ]]></example>
    <p>This asks Juliet if she would like to form an In-Band Bytestreams connection, using the session ID 'i781hf64' (generated by the initiator here) to uniquely reference the bytestream.  The 'block-size' attribute specifies the maximum amount of data (in bytes) that an IBB packet may contain.</p>
    <example caption='Success Response'><![CDATA[
<iq type='result' 
    from='juliet@capulet.com/balcony'
    to='romeo@montague.net/orchard'
    id='inband_1'/>
    ]]></example>
    <p>This is a success response from juliet@capulet.com/balcony, saying that the bytestream is active.</p>
    <example caption='Error'><![CDATA[
<iq type='error' 
    from='juliet@capulet.com/balcony'
    to='romeo@montague.net/orchard'
    id='inband_1'/>
  <error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
    ]]></example>
    <p>This is an error response from juliet@capulet.com/balcony saying that an In-Band Bytestreams is not possible.</p>
  </section2>

  <section2 topic='Sending Data'>
    <p>Each chunk of data is contained in a &lt;data/&gt; element qualified by the 'http://jabber.org/protocol/ibb' namespace. The data element SHOULD be sent in an IQ stanza to enable proper tracking and throttling, but MAY be sent in a message stanza (although this is not encouraged). The data to be sent, prior to any encoding or wrapping in the stanza, must be no larger than the 'block-size' determined in the stream negotiation.</p>
    <example caption='Sending data using IQ'><![CDATA[
<iq from='romeo@montague.net/orchard' 
    id='kr91n475'
    to='juliet@capulet.com/balcony'
    type='set'>
  <data xmlns='http://jabber.org/protocol/ibb' sid='i781hf64' seq='0'>
    qANQR1DBwU4DX7jmYZnncmUQB/9KuKBddzQH+tZ1ZywKK0yHKnq57kWq+RFtQdCJ
    WpdWpR0uQsuJe7+vh3NWn59/gTc5MDlX8dS9p0ovStmNcyLhxVgmqS8ZKhsblVeu
    IpQ0JgavABqibJolc3BKrVtVV1igKiX/N7Pi8RtY1K18toaMDhdEfhBRzO/XB0+P
    AQhYlRjNacGcslkhXqNjK5Va4tuOAPy2n1Q8UUrHbUd0g+xJ9Bm0G0LZXyvCWyKH
    kuNEHFQiLuCY6Iv0myq6iX6tjuHehZlFSh80b5BVV9tNLwNR5Eqz1klxMhoghJOA
  </data>
</iq>
    ]]></example>
    <p>The data to send is included as XML character data of the &lt;data/&gt; element after being encoded as Base64 as specified in Section 4 of &rfc4648;. The 'seq' attribute is a 16-bit unsigned integer counter starting at 0, and MUST be incremented for each packet sent. Thus, the next packet sent should have a 'seq' of 1, the one after that with a 'seq' of 2, and so on. The counter loops at maximum, so after value 65535, 'seq' MUST start again at 0.</p>
    <p>In the case of IQ stanzas, the recipient MUST reply to each data packet with an IQ of type 'result'.</p>
    <example caption='Acknowledging data using IQ'><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='kr91n475'
    to='romeo@montague.net/orchard'
    type='result'/>
    ]]></example>
    <p>The sender need not wait for these acknowledgements before sending further stanzas. However, it is RECOMMENDED that the sender does wait in order to minimize possible rate-limiting penalties.</p>
    <p>It is possible that delivery of the stanza might fail.</p>
    <example caption='Failed delivery with iq'><![CDATA[
<iq from='juliet@capulet.com/balcony' 
    id='hr81gs67' 
    to='romeo@montague.net/orchard' 
    type='error'>
  <error type='cancel'>
    <remote-server-timeout xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
    ]]></example>
    <p>Upon delivery failure, the sender MUST consider the bytestream to be closed and invalid.</p>
  </section2>

  <section2 topic='Closing the Bytestream'>
    <p>To close the bytestream, either party can send an IQ-set containing a &lt;close/&gt; element.</p>
    <example caption='Closing the bytestream'><![CDATA[
<iq from='romeo@montague.net/orchard'
    id='us71g45j'
    to='juliet@capulet.com/balcony'
    type='set'>
  <close xmlns='http://jabber.org/protocol/ibb' sid='i781hf64'/>
</iq>
    ]]></example>
    <example caption='Success response'><![CDATA[
<iq from='juliet@capulet.com/balcony'
    id='us71g45j'
    to='romeo@montague.net/orchard'
    type='result'/> 
    ]]></example>
    <p>This is a success response from juliet@capulet.com/balcony, saying that the bytestream is now closed.</p>
    <p>It is possible that the recipient of the close notification does not know about the bytestream, in which case it would return an item-not-found error.</p>
    <example caption='Possible error'><![CDATA[
<iq type='error' 
    from='juliet@capulet.com/balcony'
    to='romeo@montague.net/orchard'
    id='us71g45j'>
  <error type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
    ]]></example>
    <p>Upon error, the bytestream MUST be considered closed and invalid.</p>
  </section2>

  <section2 topic='Receiving Packets'>
    <p>Data packets MUST be processed in the order they are received.  If an out-of-sequence packet is received for a particular bytestream (determined by checking the 'seq' attribute), then this indicates that a packet has been lost.  The recipient MUST NOT process the data of such an out-of-sequence packet, nor any that follow it within the same bytestream, and at this point MUST consider the bytestream closed and invalid.</p>
  </section2>

</section1>

<section1 topic='Bidirectionality' anchor='bidi'>
  <p>An in-band bytestream is bidirectional. Therefore, either party to the bytestream is allowed to send data. Each sender MUST initialize the 'seq' attribute to zero and increment the 'seq' value by one with each chunk of data it sends. Each recipient MUST track chunks based on the 'seq' values it receives. The 'seq' values in each direction are independent of the values in the other direction. Thus there are two data sequences for each SessionID. If enabled by the application that uses IBB, the parties MAY negotiate multiple SessionIDs for the same bytestream, however such methods are out of scope for this specification.</p>
</section1>

<section1 topic='Usage Guidelines'>
  <ul>
    <li>Generally, IBB should be used as a last resort. <strong>SOCKS5 Bytestreams</strong> will almost always be preferable.</li>
    <li>A server MAY rate limit a connection, depending on the size and frequency of data packets.</li>
    <li>A server MAY disconnect a connection that sends overly large packets as defined by server policy.</li>
    <li>&lt;message&gt; delivery SHOULD be used when &xep0079; or other stanza flow-control facilities are available.  However, if they are not available, then &lt;iq&gt; SHOULD be used.</li>
    <li>It is RECOMMENDED to use a 'block-size' of 4096.</li>
    <li>For proper tracking of message delivery errors, the use of the stanza 'id' attribute is RECOMMENDED.</li>
  </ul>
</section1>

<section1 topic='Security Considerations'>
  <p>In-Band Bytestreams is as secure as the underlying Jabber transport.  The bytestream application could have its own security layer, but this is outside of the scope of IBB.</p>
  <p>An entity MUST verify any Base64 data received.  An implementation MUST reject (not ignore) any characters that are not explicitly allowed by the Base64 alphabet; this helps to guard against creation of a covert channel that could be used to "leak" information.  An implementation MUST NOT break on invalid input and MUST reject any sequence of Base64 characters containing the pad ('=') character if that character is included as something other than the last character of the data (e.g.  "=AAA" or "BBBB=CCC"); this helps to guard against buffer overflow attacks and other attacks on the implementation.  Base encoding visually hides otherwise easily recognized information, such as passwords, but does not provide any computational confidentiality.  Base64 encoding MUST follow the definition in Section 4 of RFC 4648.</p>
</section1>

<section1 topic='IANA Considerations'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations'>
  <section2 topic='Protocol Namespaces'>
    <p>The &REGISTRAR; includes 'http://jabber.org/protocol/ibb' in its registry of XML namespaces &NAMESPACES;.</p> 
  </section2>
</section1>

<section1 topic='XML Schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/ibb'
    xmlns='http://jabber.org/protocol/ibb'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0047: http://www.xmpp.org/extensions/xep-0047.html
    </xs:documentation>
  </xs:annotation>

   <xs:element name='open'>
     <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='sid' type='xs:string' use='required'/>
          <xs:attribute name='block-size' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
     </xs:complexType>
   </xs:element>

   <xs:element name='close'>
     <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='empty'>
          <xs:attribute name='sid' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
     </xs:complexType>
   </xs:element>

   <xs:element name='data'>
     <xs:complexType>
      <xs:simpleContent>
        <xs:extension base='xs:string'>
          <xs:attribute name='sid' type='xs:string' use='required'/>
          <xs:attribute name='seq' type='xs:string' use='required'/>
        </xs:extension>
      </xs:simpleContent>
     </xs:complexType>
   </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
  ]]></code>
</section1>

</xep>
