<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Public Key Publishing</title>
  <abstract>This specification defines a method by which an entity can publish its public keys over XMPP.</abstract>
  &LEGALNOTICE;
  <number>0189</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0163</spec>
    <spec>W3C XML Signature</spec>
  </dependencies>
  <supersedes>None</supersedes>
  <supersededby>None</supersededby>
  <shortname>NOT YET ASSIGNED</shortname>
  &ianpaterson;
  &stpeter;
  <revision>
    <version>0.7</version>
    <date>2008-03-03</date>
    <initials>psa</initials>
    <remark><p>Changed temporary namespace per XEP-0053 procedures; corrected several small errors in the text and examples.</p></remark>
  </revision>
  <revision>
    <version>0.6</version>
    <date>2007-08-15</date>
    <initials>psa</initials>
    <remark><p>More clearly explained node creation and key publication workflows.</p></remark>
  </revision>
  <revision>
    <version>0.5</version>
    <date>2007-03-05</date>
    <initials>ip</initials>
    <remark><p>Merged node creation and first publish examples; recommended the value of each &lt;KeyName/&gt; element and id attribute is set to the key fingerprint; added fprint element and more examples</p></remark>
  </revision>
  <revision>
    <version>0.4</version>
    <date>2006-11-27</date>
    <initials>ip</initials>
    <remark><p>Added jid attribute and send use case; changed namespace</p></remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2006-11-20</date>
    <initials>ip</initials>
    <remark><p>Specified that PEP nodes SHOULD be persistent</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-09-29</date>
    <initials>ip</initials>
    <remark><p>Replaced pubkey and key elements with the KeyInfo element defined in W3C XML Signature</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-07-18</date>
    <initials>ip</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>This document defines different methods an entity MAY use for publishing its long-term public keys:</p>
  <ul>
    <li>Publishing public keys to a set of subscribers.</li>
    <li>Querying another entity for its public keys.</li>
  </ul>
  <p>An entity MAY have multiple public keys with different formats, signatures, algorithms, strengths and expiry dates. Each client used by a user may use different keys.</p>
</section1>

<section1 topic='Public Key Publication via PEP' anchor='pub'>
  <p>An entity SHOULD follow the best practices defined in &xep0222; to publish its long-term public keys via its own server. Processes for doing so are described in the following sections.</p>
  <section2 topic='Creating the Node' anchor='pub-create'>
    <p>If the pubkeys PEP node does not exist already then the entity must create it. The node MUST have a NodeID of "urn:xmpp:tmp:pubkey" &NSNOTE;.</p>
    <p>The node MUST be configured as follows:</p>
    <ul>
      <li>Items published to the node are persistent (this is done by setting the "persist_items" option to true).</li>
      <li>Keys will be pushed to subscribers only when new keys are published, not when subscribers become newly available or when a new subscription is created (this is done by setting the "send_last_published_item" option to "never").</li>
    </ul> 
    <p>If the user wants to control access to his/her identity (see <link url='#security'>Security Considerations</link>) then the node access model SHOULD be something other than "open" (this can be done by setting the "access_model" option to a value of "authorize", "presence", "roster", or "whitelist").</p>
    <example caption='Entity Creates Node'><![CDATA[
<iq type='set'
    from='juliet@capulet.com/balcony'
    to='pubsub.shakespeare.lit'
    id='create1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <create node='urn:xmpp:tmp:pubkey'/>
    <configure>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#persist_items'>
          <value>1</value>
        </field>
        <field var='pubsub#send_last_published_item'>
          <value>never</value>
        </field>
        <field var='pubsub#access_model'>
          <value>roster</value>
        </field>
        <field var='pubsub#roster_groups_allowed'>
          <value>friends</value>
        </field>
      </x>
    </configure>
  </pubsub>
</iq>
    ]]></example>
    <p>Alternatively, if the entity's pubsub service supports both the "auto-create" and "publish-options" features, then the entity MAY create the node by publishing a key and in the first publish including a &lt;publish-options/&gt; element. However, note that not all pubsub services support this feature, since it is optional in &xep0060;.</p>
    <example caption='Entity Auto-Creates Node and Publishes an RSA Key'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:tmp:pubkey'>
      <item id='julietRSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1hash</KeyName>
          <KeyValue>
            <RSAKeyValue>
              <Modulus>...</Modulus>
              <Exponent>AQAB</Exponent>
            </RSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </publish>
    <configure>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#persist_items'>
          <value>1</value>
        </field>
        <field var='pubsub#send_last_published_item'>
          <value>never</value>
        </field>
        <field var='pubsub#access_model'>
          <value>roster</value>
        </field>
        <field var='pubsub#roster_groups_allowed'>
          <value>friends</value>
        </field>
      </x>
    </configure>
  </pubsub>
</iq>
    ]]></example>
  </section2>
  <section2 topic='Publishing a Key' anchor='pub-publish'>
    <p>The entity publishes a key by sending a pubsub publish request to the pubsub service. A previously published key can be updated by re-publishing the key using the same ItemID.</p>
    <p>Each public key MUST be wrapped in a &lt;KeyInfo/&gt; element qualified by the 'http://www.w3.org/2000/09/xmldsig#' namespace as specified in &w3xmlsig;. Each &lt;KeyInfo/&gt; element MUST contain a &lt;KeyName/&gt; element with a name that is unique for the user; this enables the key to be referenced by other XMPP Extension Protocols (for example, &xep0136;). The name MAY be the same as the value of the ItemID. However, if two &lt;KeyInfo/&gt; elements contain the same public key in different formats (for example, an X.509 certificate may contain an RSA key), then the name of the two keys SHOULD be the same.</p>
    <p>Before computing the fingerprint or publishing the key, all character data <em>between</em> all elements in the &lt;KeyInfo/&gt; element MUST be removed and the XML MUST be converted to canonical form according to &w3canon;. (Any whitespace or other character data shown in the examples herein is included only for the purpose of readability.)</p>
    <p>The value of the ItemID SHOULD be set to the fingerprint of the public key, e.g., the SHA256 hash (see &nistfips180-2;) of the key's normalized  &lt;KeyValue/&gt;, &lt;PGPData/&gt; or &lt;X509Data/&gt; element. Therefore subscribers or other interested entities are able to request a single key by specifying its fingerprint (for example, when a subscriber is using the &xep0116; protocol).</p>
    <example caption='Entity Publishes a DSA Key to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:tmp:pubkey'>
      <item id='julietDSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietDSAkey1hash</KeyName>
          <KeyValue>
            <DSAKeyValue>
              <P>...</P>
              <Q>...</Q>
              <G>...</G>
              <Y>...</Y>
            </DSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
    ]]></example>
    <example caption='Entity Publishes an X.509 Certificate to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:tmp:pubkey'>
      <item id='julietX509cert1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietX509cert1hash</KeyName>
          <X509Data>
            <X509IssuerSerial>
              <X509IssuerName>CN=TAMURA Kent, OU=TRL, O=IBM, L=Yamato-shi, ST=Kanagawa, C=JP</X509IssuerName>
              <X509SerialNumber>12345678</X509SerialNumber>
            </X509IssuerSerial>
            <X509SKI>31d97bd7</X509SKI>
            <X509SubjectName>Subject of Certificate B</X509SubjectName>
            <X509Certificate>...</X509Certificate>
            <X509Certificate>...</X509Certificate>
            <X509Certificate>...</X509Certificate>
          </X509Data>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
    ]]></example>
    <example caption='Entity Publishes a PGP Key to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub4'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='urn:xmpp:tmp:pubkey'>
      <item id='julietPGPkey1hash'>
        <KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
          <KeyName>julietPGPkey1hash</KeyName>
          <PGPData>
            <PGPKeyId>...</PGPKeyId>
            <PGPKeyPacket>...</PGPKeyPacket>
          </PGPData>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
    ]]></example>
    <p>After the account owner publishes the key, the pubsub service shall send a notification to each subscriber or otherwise authorized and interested entity.</p>
    <example caption='Pubsub Service Sends Notification with Key'><![CDATA[
<message to='romeo@montague.net/garden' from='juliet@capulet.com' type='headline'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='urn:xmpp:tmp:pubkey'>
      <item id='julietRSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1hash</KeyName>
          <KeyValue>
            <RSAKeyValue>
              <Modulus>...</Modulus>
              <Exponent>AQAB</Exponent>
            </RSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </items>
  </event>
  <addresses xmlns='http://jabber.org/protocol/address'>
    <address type='replyto' jid='juliet@capulet.com/balcony'/>
  </addresses>
</message>
    ]]></example>
    <p>Note: The stanza containing the event notification (see example above) MAY also include 'replyto' data (as specified by the &xep0033; protocol) to provide an explicit association between the published data and the <em>resource</em> that published it.</p>
  </section2>
</section1>

<section1 topic='Public Key Retrieval via PEP' anchor='retrieve'>
  <example caption='Subscriber Requests Keys from Account'><![CDATA[
<iq type='get'
    to='juliet@capulet.com'
    from='romeo@montague.net/garden'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:tmp:pubkey'/>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity&apos;s Server Returns Keys to Subscriber'><![CDATA[
<iq type='result'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:tmp:pubkey'>
      <item id='julietRSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1hash</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietDSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietDSAkey1hash</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietX509cert1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietX509cert1hash</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietPGPkey1hash'>
        <KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
          <KeyName>julietPGPkey1hash</KeyName>
          ...
        </KeyInfo>
      </item>
    </items>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Subscriber Requests Specific Key'><![CDATA[
<iq type='get'
    to='juliet@capulet.com'
    from='romeo@montague.net/garden'
    id='items2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:tmp:pubkey'>
      <item id='julietRSAkey1hash'/>
    </items>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity&apos;s Server Returns Key to Subscriber'><![CDATA[
<iq type='result'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com'
    id='items2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='urn:xmpp:tmp:pubkey'>
      <item id='julietRSAkey1hash'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1hash</KeyName>
          <KeyValue>
            <RSAKeyValue>
              <Modulus>...</Modulus>
              <Exponent>AQAB</Exponent>
            </RSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </items>
  </pubsub>
</iq>
  ]]></example>
</section1>

<section1 topic='Requesting Public Keys Directly From Another Entity' anchor='request'>
  <p>If an entity wishes to request the public keys of another entity and it cannot access the keys via <cite>Personal Eventing via Pubsub</cite>, then the entity MAY send an &IQ; of type 'get' to the other entity, containing an empty &lt;pubkeys/&gt; element qualified by the 'urn:xmpp:tmp:pubkey' namespace &NSNOTE;.</p>
  <example caption='Public keys request'><![CDATA[
<iq type='get'
    id='keys1'
    to='juliet@capulet.com/balcony'
    from='romeo@montague.net/garden'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey'/>
</iq>
  ]]></example>
  <p>The other entity MUST make a careful access control decision before returning only those public keys for which it holds the corresponding private key (not necessarily the full list of keys being published via <cite>Personal Eventing via Pubsub</cite>):</p>
  <example caption='Successful public keys response'><![CDATA[
<iq type='result'
    id='keys1'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey'>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
  </pubkeys>
</iq>
  ]]></example>
  <p>If the receiving entity decides not to return the public keys, it MUST return an IQ error, which SHOULD be &unavailable; (to avoid divulging presence to unauthorized entities), but MAY be some other appropriate error, such as &forbidden; or &notallowed;:</p>
  <example caption='Access to public keys denied'><![CDATA[
<iq type='error'
    id='keys1'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey'/>
  <error code='503' type='cancel'>
    <service-unavailable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
  ]]></example>
  <p>An entity MAY request one or more specific public keys by specifying their fingerprints (see <link url='#pub'>Public Key Publication via PEP</link>) as the content of &lt;fprint/&gt; child elements:</p>
  <example caption='Specific public keys request'><![CDATA[
<iq type='get'
    id='keys2'
    to='juliet@capulet.com/balcony'
    from='romeo@montague.net/garden'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey'>
    <fprint>julietRSAkey1hash</fprint>
    <fprint>julietRSAkey2hash</fprint>
  </pubkeys>
</iq>
  ]]></example>
  <example caption='Successful specific public keys response'><![CDATA[
<iq type='result'
    id='keys2'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey'>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
  </pubkeys>
</iq>
  ]]></example>
</section1>

<section1 topic='Requesting Public Keys Directly From a Third Party' anchor='third'>
  <p>An entity may request the public keys of another entity from a third party using the 'jid' attribute of the &lt;pubkeys/&gt; element to specify the JID that the keys belong to:</p>
  <example caption='Requesting public keys from a third-party'><![CDATA[
<iq type='get'
    id='keys3'
    to='juliet@capulet.com/balcony'
    from='romeo@montague.net/garden'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey' jid='benvolio@montague.net'/>
</iq>
  ]]></example>
  <example caption='Third-party responds with public keys'><![CDATA[
<iq type='result'
    id='keys3'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey' jid='benvolio@montague.net'>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      ...
    </KeyInfo>
  </pubkeys>
</iq>
  ]]></example>
  <example caption='Third party has no copies of the keys'><![CDATA[
<iq type='error'
    id='keys3'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey' jid='benvolio@montague.net'/>
  <error code='404' type='cancel'>
    <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
  ]]></example>
</section1>

<section1 topic='Sending Public Keys Directly To Another Entity' anchor='send'>
  <p>If an entity wishes to send public keys to another entity then it MAY include them in a &MESSAGE; stanza. The entity MAY use the 'jid' attribute of the &lt;pubkeys/&gt; element to specify the JID that the keys belong to. If no 'jid' attribute is specified then the other entity SHOULD assume the keys belong to the sender of the stanza.</p>
  <example caption='Sending public keys'><![CDATA[
<message to='romeo@montague.net/garden'
         from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='urn:xmpp:tmp:pubkey' jid='benvolio@montague.net'>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      <KeyValue>
        <RSAKeyValue>
          <Modulus>...</Modulus>
          <Exponent>AQAB</Exponent>
        </RSAKeyValue>
      </KeyValue>
    </KeyInfo>
    <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
      <KeyValue>
        <RSAKeyValue>
          <Modulus>...</Modulus>
          <Exponent>AQAB</Exponent>
        </RSAKeyValue>
      </KeyValue>
    </KeyInfo>
  </pubkeys>
</message>
  ]]></example>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>The reliable association between a user or entity and its public keys is beyond the scope of this document. However, each client SHOULD maintain its own secure library of the public keys (or the "fingerprints" of the keys) it associates with other users (not necessarily JIDs).</p>
  <p>Whenever public keys are published an identity is typically associated with a JID. Although the public keys are public information, it may be critically important for the user of the JID to keep his identity secret from all but a few specified people. Implementors MUST take great care to ensure that the identity of the user of a JID is never divulged to anyone except the entities who have been permitted by the user to access the public key.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <section2 topic='Protocol Namespaces' anchor='ns'>
    <p>Until this specification advances to a status of Draft, its associated namespace shall be "urn:xmpp:tmp:pubkey"; upon advancement of this specification, the &REGISTRAR; shall issue a permanent namespace in accordance with the process defined in Section 4 of &xep0053;.</p>
  </section2>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:tmp:pubkey'
    xmlns='urn:xmpp:tmp:pubkey'
    elementFormDefault='qualified'>

  <xs:element name='pubkeys'>
    <xs:complexType>
      <xs:choice 
          xmlns:dsig='http://www.w3.org/2000/09/xmldsig#'
          maxOccurs='unbounded'
          minOccurs='0'>
        <xs:element name='fprint' type='xs:string'/>
        <xs:element ref='dsig:KeyInfo'/>
      </xs:choice>
      <xs:attribute name='jid' type='xs:string' use='optional'/>
      <xs:anyAttribute namespace='##any' processContents='lax'/>
    </xs:complexType>
  </xs:element>

</xs:schema>
  ]]></code>
</section1>
</xep>
