<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Public Key Publishing</title>
  <abstract>This document specifies how an entity may publish its public keys over XMPP.</abstract>
  &LEGALNOTICE;
  <number>0189</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <jig>Standards JIG</jig>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0163</spec>
    <spec>W3C XML Signature</spec>
  </dependencies>
  <supersedes>None</supersedes>
  <supersededby>None</supersededby>
  <shortname>pubkeys</shortname>
  &ianpaterson;
  <revision>
    <version>0.3</version>
    <date>2006-11-20</date>
    <initials>ip</initials>
    <remark><p>Specified that PEP nodes SHOULD be persistent</p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2006-09-29</date>
    <initials>ip</initials>
    <remark><p>Replaced pubkey and key elements with the KeyInfo element defined in W3C XML Signature</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2006-07-18</date>
    <initials>ip</initials>
    <remark><p>Initial version.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>This document defines different methods an entity may use for publishing its long-term public keys:</p>
  <ul>
    <li>Publishing public keys to a set of subscribers.</li>
    <li>Querying another entity for its public keys.</li>
  </ul>
  <p>An entity MAY have multiple public keys with different formats, signatures, algorithms, strengths and expiry dates. Each client used by a user may use different keys.</p>
</section1>

<section1 topic='Public Key Publication and Retrieval via PEP' anchor='usecases-pubsub'>
  <p>An entity SHOULD use &xep0163; to publish all its long-term public keys via its own server.</p>
  <p>If the pubkeys PEP node does not exist already then the entity MUST create it first. In this case, the entity SHOULD specify that items published to the node are persistent and that the keys will only be pushed to subscribers whenever new keys are published (i.e. not when subscribers become newly available or when a new subscription is created). If the user wants to control access to his/her identity (see <link url='#security'>Security Considerations</link>) then the entity MUST also specify an appropriate access model other than "Open".</p>
  <example caption='Entity Creates Public Keys Publishing Node'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='create1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <create node='http://jabber.org/protocol/pubkeys'/>
    <configure>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#node_config</value>
        </field>
        <field var='pubsub#persist_items'>
          <value>1</value>
        </field>
        <field var='pubsub#send_last_published_item'>
          <value>never</value>
        </field>
        <field var='pubsub#access_model'>
          <value>roster</value>
        </field>
        <field var='pubsub#roster_groups_allowed'>
          <value>friends</value>
        </field>
      </x>
    </configure>
  </pubsub>
</iq>
  ]]></example>
  <p>Once the publishing node has been created, the entity can update the keys at any time. Each public key MUST be wrapped in a &lt;KeyInfo/&gt; element as specified in &w3xmlsig;. Each &lt;KeyInfo/&gt; element MUST contain a &lt;KeyName/&gt; element with a unique (for the user) name to allow the key to be referenced by other XMPP Extension Protocols.</p>
  <example caption='Entity Publishes an RSA Key to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/pubkeys'>
      <item id='julietRSAkey1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1</KeyName>
          <KeyValue>
            <RSAKeyValue>
              <Modulus>...</Modulus>
              <Exponent>AQAB</Exponent>
            </RSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity Publishes a DSA Key to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub2'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/pubkeys'>
      <item id='julietDSAkey1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietDSAkey1</KeyName>
          <KeyValue>
            <DSAKeyValue>
              <P>...</P><Q>...</Q><G>...</G><Y>...</Y>
            </DSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity Publishes an X.509 Certificate to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub3'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/pubkeys'>
      <item id='julietX509cert1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietX509cert1</KeyName>
          <X509Data>
            <X509IssuerSerial>
              <X509IssuerName>CN=TAMURA Kent, OU=TRL, O=IBM, L=Yamato-shi, ST=Kanagawa, C=JP</X509IssuerName>
              <X509SerialNumber>12345678</X509SerialNumber>
            </X509IssuerSerial>
            <X509SKI>31d97bd7</X509SKI>
            <X509SubjectName>Subject of Certificate B</X509SubjectName>
            <X509Certificate>...</X509Certificate>
            <X509Certificate>...</X509Certificate>
            <X509Certificate>...</X509Certificate>
          </X509Data>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity Publishes a PGP Key to its Server'><![CDATA[
<iq from='juliet@capulet.com/balcony' type='set' id='pub4'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='http://jabber.org/protocol/pubkeys'>
      <item id='julietPGPkey1'>
        <KeyInfo xmlnss="http://www.w3.org/2000/09/xmldsig#">
          <KeyName>julietPGPkey1</KeyName>
          <PGPData>
            <PGPKeyId>...</PGPKeyId>
            <PGPKeyPacket>...</PGPKeyPacket>
          </PGPData>
        </KeyInfo>
      </item>
    </publish>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Subscriber Receives Event with Key'><![CDATA[
<message to='romeo@montague.net/garden' from='juliet@capulet.com' type='headline'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='http://jabber.org/protocol/pubkeys'>
      <item id='julietRSAkey1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1</KeyName>
          <KeyValue>
            <RSAKeyValue>
              <Modulus>...</Modulus>
              <Exponent>AQAB</Exponent>
            </RSAKeyValue>
          </KeyValue>
        </KeyInfo>
      </item>
    </items>
  </event>
  <addresses xmlns='http://jabber.org/protocol/address'>
    <address type='replyto' jid='juliet@capulet.com/balcony'/>
  </addresses>
</message>
  ]]></example>
  <p>Note: The stanza containing the event notification (see example above) MAY also include 'replyto' data (as specified by the &xep0033; protocol) to provide an explicit association between the published data and the <em>resource</em> that published it.</p>
  <example caption='Subscriber Requests Keys from Account'><![CDATA[
<iq type='get'
    to='juliet@capulet.com'
    from='romeo@montague.net/garden'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='http://jabber.org/protocol/pubkeys'/>
  </pubsub>
</iq>
  ]]></example>
  <example caption='Entity&apos;s Server Returns Keys to Subscriber'><![CDATA[
<iq type='result'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com'
    id='items1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <items node='http://jabber.org/protocol/pubkeys'>
      <item id='julietRSAkey1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietRSAkey1</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietDSAkey1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietDSAkey1</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietX509cert1'>
        <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
          <KeyName>julietX509cert1</KeyName>
          ...
        </KeyInfo>
      </item>
      <item id='julietPGPkey1'>
        <KeyInfo xmlnss="http://www.w3.org/2000/09/xmldsig#">
          <KeyName>julietPGPkey1</KeyName>
          ...
        </KeyInfo>
      </item>
    </items>
  </pubsub>
</iq>
  ]]></example>
</section1>

<section1 topic='Requesting Public Keys Directly From Another Entity' anchor='usecases-request'>
  <p>If an entity wishes to request the public keys of another entity and it cannot access the keys via <cite>Personal Eventing via Pubsub</cite>, then the entity MAY send an IQ to the other entity:</p>
  <example caption='Location request'><![CDATA[
<iq type='get'
    id='keys1'
    to='juliet@capulet.com/balcony'
    from='romeo@montague.net/garden'>
  <pubkeys xmlns='http://jabber.org/protocol/pubkeys'/>
</iq>
  ]]></example>
  <p>The other entity MUST make a careful access control decision before returning only those public keys for which it holds the corresponding private key (not necessarily the full list of keys being published via <cite>Personal Eventing via Pubsub</cite>):</p>
  <example caption='Successful public keys response'><![CDATA[
<iq type='result'
    id='keys1'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
    <pubkeys xmlns='http://jabber.org/protocol/pubkeys'>
      <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
        <KeyName>julietRSAkey1</KeyName>
        ...
      </KeyInfo>
      <KeyInfo xmlns='http://www.w3.org/2000/09/xmldsig#'>
        <KeyName>julietX509cert1</KeyName>
        ...
      </KeyInfo>
    </pubkeys>
</iq>
  ]]></example>
  <p>If the receiving entity decides not to return the public keys, it MUST return an IQ error, which SHOULD be &unavailable; (to avoid divulging presence to unauthorized entities), but MAY be some other appropriate error, such as &forbidden; or &notallowed;:</p>
  <example caption='Access to public keys denied'><![CDATA[
<iq type='error'
    id='keys1'
    to='romeo@montague.net/garden'
    from='juliet@capulet.com/balcony'>
  <pubkeys xmlns='http://jabber.org/protocol/pubkeys'/>
  <error code='503' type='cancel'>
    <service-unavailable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
  </error>
</iq>
  ]]></example>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>The reliable association between a user or entity and its public keys is beyond the scope of this document. However, each client SHOULD maintain its own secure library of the public keys (or the "fingerprints" of the keys) it associates with other users (not necessarily JIDs).</p>
  <p>Whenever public keys are published an identity is typically associated with a JID. Although the public keys are public information, it may be critically important for the user of the JID to keep his identity secret from all but a few specified people. Implementors MUST take great care to ensure the identity of the user of a JID is never divulged to anyone except the entities who have been permitted by the user to access the public key.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>The &REGISTRAR; shall add 'http://jabber.org/protocol/pubkeys' to its registry of protocol namespaces.</p>
</section1>

<section1 topic='XML Schema' anchor='schema'>
  <code><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='http://jabber.org/protocol/pubkeys'
    xmlns='http://jabber.org/protocol/pubkeys'
    elementFormDefault='qualified'>

  <xs:element name='pubkeys'>
    <xs:complexType>
      <xs:choice maxOccurs='unbounded'>
        <any processContents="lax" namespace="##other"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

</xs:schema>
  ]]></code>
</section1>
</xep>
