<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Private Information via Pubsub</title>
  <abstract>This document specifies protocol semantics for using the XMPP publish-subscribe extension to persistently store private information such as bookmarks and client configuration options.</abstract>
  &LEGALNOTICE;
  <number>0223</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards JIG</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XMPP IM</spec>
    <spec>XEP-0030</spec>
    <spec>XEP-0060</spec>
    <spec>XEP-0115</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>TO BE ASSIGNED</shortname>
  &stpeter;
  <revision>
    <version>0.1</version>
    <date>2007-08-08</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2007-07-18</date>
    <initials>psa</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>

<section1 topic='Introduction' anchor='intro'>
  <section2 topic='Motivation' anchor='motivation'>
    <p>&xep0163; introduced the idea of a virtual &xep0060; service associated with an IM user's bare JID &LOCALBARE;. However, personal eventing (PEP) is not optimized for the persistent storage of data objects that are meant to be accessed only by the account owner, &#224; la &xep0049;. Therefore this document defines a set of best practices that enable a user to persistently store private information at their virtual pubsub service; in effect, we "sub-class" PEP by showing how a particular pubsub node can be configured for storing private information (we call such a node a "PIP node").</p>
  </section2>
  <section2 topic='How It Works' anchor='howitworks'>
    <p>This section provides a friendly introduction to private information via pubsub (a.k.a. PIP).</p>
    <p>Imagine that you are a Shakespearean character named Juliet and that you want to persistently store some private information such as bookmarks (&xep0048;).</p>
    <p>We assume that your server (capulet.lit) supports PEP along with the "publish-options" feature, and that your client discovered that support when you logged in.</p>
    <p>You want to start bookmarking &xep0045; rooms so your client stores that data privately:</p>
    <example caption='Storing bookmarks'><![CDATA[
<iq from='juliet@capulet.lit/balcony' type='set' id='pdp1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='storage:bookmarks'>
      <item>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing' 
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
            <password>Gl0b3</password>
          </conference>
        </storage>
      </item>
    </publish>
    <publish-options>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#publish-options</value>
        </field>
        <field var='pubsub#persist_items'>
          <value>true</value>
        </field>
        <field var='pubsub#access_model'>
          <value>whitelist</value>
        </field>
      </x>
    </publish-options>
  </pubsub>
</iq>
    ]]></example>
    <p>Your publish request is a standard pubsub request except that:</p>
    <ol start='1'>
      <li>The item is persisted (pubsub#persist_items is true).</li>
      <li>In this case, access is limited to yourself (the "whitelist" access model defaults to allowing access for the account owner, i.e., you).</li>
    </ol>
    <p>If all goes well (see <link url='#publish'>Storing Data</link>), your bookmarks will be stored and the information will be pushed out to all of your resources (here "balcony" and "chamber").</p>
    <example caption='Publisher receives event notification'><![CDATA[
<message from='juliet@capulet.lit'
         to='juliet@capulet.lit/balcony'
         type='headline'
         id='bmfoo1'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='storage:bookmarks'>
      <item id='SomeID'>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing' 
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
            <password>Gl0b3</password>
          </conference>
        </storage>
      </item>
    </items>
  </event>
</message>

<message from='juliet@capulet.lit'
         to='juliet@capulet.lit/chamber'
         type='headline'
         id='bmfoo2'>
  <event xmlns='http://jabber.org/protocol/pubsub#event'>
    <items node='storage:bookmarks'>
      <item id='SomeID'>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing' 
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
            <password>Gl0b3</password>
          </conference>
        </storage>
      </item>
    </items>
  </event>
</message>
    ]]></example>
    <p>So that's the general idea.</p>
  </section2>
</section1>

<section1 topic='Concepts and Approach' anchor='approach'>
  <p>Personal information via pubsub ("PIP") re-uses the concepts already defined in <cite>XEP-0060</cite> and <cite>XEP-0163</cite>. In order to optimize for object persistence of private information instead of transient event notifications related to semi-public data, a PIP node MUST be configured as follows:</p>
  <ol start='1'>
    <li>Set pubsub#access_model to "whitelist".</li>
    <li>Set pubsub#persist_items to true.</li>
  </ol>
</section1>

<section1 topic='Storing Data' anchor='store'>
  <p>An account owner publishes an item to a node by following the protocol specified in <cite>XEP-0060</cite>:</p>
  <example caption='Account owner stores data'><![CDATA[
<iq from='juliet@capulet.lit/balcony' type='set' id='pdp1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='storage:bookmarks'>
      <item>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing' 
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
            <password>Gl0b3</password>
          </conference>
        </storage>
      </item>
    </publish>
  </pubsub>
</iq>
  ]]></example>
  <p>If the node does not already exist, the virtual pubsub service MUST create the node. As described in <cite>XEP-0163</cite>, this "auto-create" feature (defined in <cite>XEP-0060</cite>) MUST be supported by a PEP service. (Naturally, the account owner's client MAY follow the node creation use case specified in <cite>XEP-0060</cite> before attempting to publish an item.)</p>
  <p>In order for the client to reliably persist private information, the virtual pubsub service must also support the "publish-options" feature defined in <cite>XEP-0060</cite>. Typically, a client will publish with options so that the object is privately stored.</p>
    <example caption='Storing bookmarks'><![CDATA[
<iq from='juliet@capulet.lit/balcony' type='set' id='pdp1'>
  <pubsub xmlns='http://jabber.org/protocol/pubsub'>
    <publish node='storage:bookmarks'>
      <item>
        <storage xmlns='storage:bookmarks'>
          <conference name='The Play&apos;s the Thing' 
                      autojoin='true'
                      jid='theplay@conference.shakespeare.lit'>
            <nick>JC</nick>
            <password>Gl0b3</password>
          </conference>
        </storage>
      </item>
    </publish>
    <publish-options>
      <x xmlns='jabber:x:data' type='submit'>
        <field var='FORM_TYPE' type='hidden'>
          <value>http://jabber.org/protocol/pubsub#publish-options</value>
        </field>
        <field var='pubsub#persist_items'>
          <value>true</value>
        </field>
        <field var='pubsub#access_model'>
          <value>whitelist</value>
        </field>
      </x>
    </publish-options>
  </pubsub>
</iq>
    ]]></example>
  <p>If the publication logic dictates that event notifications shall be sent, the account owner's server generates notifications and sends them to all appropriate entities as described in the Receiving Event Notifications section of <cite>XEP-0163</cite>.</p>
</section1>

<section1 topic='Service Discovery' anchor='disco'>
  <p>Before an account owner attempts to complete any of the use cases defined herein, its client SHOULD verify that the account owner's server supports both PEP and the "publish-options" feature; to do so, it MUST send a &xep0030; information request to the server:</p>
  <example caption='Account owner queries server regarding protocol support'><![CDATA[
<iq from='juliet@capulet.lit/balcony'
    to='capulet.lit'
    id='disco1'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>
    ]]></example>
    <p>The server MUST return an identity of "pubsub/pep" and include the "publish-options" feauture in the list of the namespaces and other features it supports:</p>
    <example caption='Server communicates protocol support'><![CDATA[
<iq from='capulet.lit'
    to='juliet@capulet.lit/balcony'
    id='disco1'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <identity category='server' type='im'/>
    <identity category='pubsub' type='pep'/>
    ...
    <feature var='http://jabber.org/protocol/pubsub#publish-options'/>
    ...
  </query>
</iq>
  ]]></example>
</section1>

<section1 topic='Security Considerations' anchor='security'>
  <p>This document introduces no security considerations above and beyond those specified in <cite>XEP-0060</cite> and <cite>XEP-0163</cite>.</p>
</section1>

<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;.</p>
</section1>

<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>This document requires no interaction with the &REGISTRAR;.</p>
</section1>

</xep>
